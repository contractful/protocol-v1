{
  "address": "0xa97d6C17265A09cC5D68830b2a7d0386B61d7c34",
  "abi": [
    {
      "inputs": [],
      "name": "MG_ACCEPTANCE_PERIOD_EXPIRED",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MG_ADDRESS_ZERO",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MG_AGREEMENT_INACTIVE",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MG_AGREEMENT_NOT_PENDING",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MG_AMOUNT_TOO_HIGH",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MG_CONTRACTOR_EQUALS_CONTRACTEE",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MG_FUNDS_ALREADY_SECURED",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MG_INVALID_MATURITY_DATE",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MG_INVALID_MIGRATION_PERIOD",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MG_INVALID_TOKEN",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MG_UNAUTHORIZED",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "agreementID",
          "type": "uint256"
        }
      ],
      "name": "AgreementActivated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "agreementID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "contractor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "contractee",
          "type": "address"
        }
      ],
      "name": "AgreementCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "agreement",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "amount",
          "type": "uint128"
        }
      ],
      "name": "FundsDeposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "agreement",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "amount",
          "type": "uint128"
        }
      ],
      "name": "FundsMigrated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "agreementID",
          "type": "uint256"
        }
      ],
      "name": "activateAgreement",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "agreementNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "agreements",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "AGREEMENT_ID",
              "type": "uint256"
            },
            {
              "internalType": "uint128",
              "name": "ACCEPTANCE_DEADLINE",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "ACTIVATION_DATE",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "MATURITY_DATE",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "PAYMENT_CYCLE_DURATION",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "PAYMENT_CYCLE_AMOUNT",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "ESTABLISHMENT_FEE_RATE",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "PENALIZATION_AMOUNT",
              "type": "uint128"
            },
            {
              "internalType": "address",
              "name": "UNDERLAYING_TOKEN",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "CONTRACTOR",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "CONTRACTEE",
              "type": "address"
            }
          ],
          "internalType": "struct Types.AgreementParameters",
          "name": "parameters",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint128",
              "name": "escrowedFunds",
              "type": "uint128"
            },
            {
              "internalType": "bool",
              "name": "active",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "closed",
              "type": "bool"
            }
          ],
          "internalType": "struct Types.AgreementState",
          "name": "state",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "agreementDuration",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "paymentCycleDuration",
          "type": "uint128"
        }
      ],
      "name": "calculateMigrationPeriods",
      "outputs": [
        {
          "internalType": "uint128[]",
          "name": "migrationPeriods",
          "type": "uint128[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "challengeDuration",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "agreementID",
          "type": "uint256"
        },
        {
          "internalType": "uint128",
          "name": "amount",
          "type": "uint128"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "claimProtocolFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint128",
              "name": "acceptanceDeadline",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "maturityDate",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "paymentCycleDuration",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "paymentCycleAmount",
              "type": "uint128"
            },
            {
              "internalType": "address",
              "name": "underlayingToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "contractor",
              "type": "address"
            }
          ],
          "internalType": "struct IManager.AgreementCreationParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "createAgreement",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "agreementID",
          "type": "uint256"
        }
      ],
      "name": "depositFundsForNextCycle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "establishmentFeeRate",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "freezeAgreements",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "agreementID",
          "type": "uint256"
        }
      ],
      "name": "getAgreementParameters",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "acceptanceDeadline",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "activationDate",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "maturityDate",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "paymentCycleDuration",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "paymentCycleAmount",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "establishmentFeeRate_",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "penalizationAmount_",
          "type": "uint128"
        },
        {
          "internalType": "address",
          "name": "underlayingToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "contractor",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "contractee",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "agreementID",
          "type": "uint256"
        }
      ],
      "name": "getAgreementState",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "escrowedFunds",
          "type": "uint128"
        },
        {
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "closed",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserAgreements",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "challengeDuration_",
          "type": "uint128"
        },
        {
          "internalType": "address",
          "name": "governance_",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "agreementID",
          "type": "uint256"
        }
      ],
      "name": "migrateFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "penalizationAmount",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "challengeDuration_",
          "type": "uint128"
        }
      ],
      "name": "setChallengeDuration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "establishmentFeeRate_",
          "type": "uint128"
        }
      ],
      "name": "setEstablishmentFeeRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "penalizationAmount_",
          "type": "uint128"
        }
      ],
      "name": "setPenalizationAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unfreezeAgreements",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userAgreements",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x33e04acfc7afe70a4c9062fb8c11d34c2857fdb19ed80268c28c464443bcbc73",
  "receipt": {
    "to": null,
    "from": "0xfd94B585517d532BC4B80E35bC26383E7834f8b9",
    "contractAddress": "0xa97d6C17265A09cC5D68830b2a7d0386B61d7c34",
    "transactionIndex": 33,
    "gasUsed": "2128545",
    "logsBloom": "0x
    "blockHash": "0x20ee3cb0c5ddb427df4a23e4e715a9bee831314b500911cea0a7b9c0d9341157",
    "transactionHash": "0x33e04acfc7afe70a4c9062fb8c11d34c2857fdb19ed80268c28c464443bcbc73",
    "logs": [
      {
        "transactionIndex": 33,
        "blockNumber": 28809340,
        "transactionHash": "0x33e04acfc7afe70a4c9062fb8c11d34c2857fdb19ed80268c28c464443bcbc73",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000fd94b585517d532bc4b80e35bc26383e7834f8b9",
          "0x0000000000000000000000003a22c8bc68e98b0faf40f349dd2b2890fae01484"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000b57d9c0eb8f000000000000000000000000000000000000000000000000003d17b8177a248401000000000000000000000000000000000000000000000000148adc4d9ae231b00000000000000000000000000000000000000000000000003d0c603db938f501000000000000000000000000000000000000000000000000149634275bcdc0b0",
        "logIndex": 210,
        "blockHash": "0x20ee3cb0c5ddb427df4a23e4e715a9bee831314b500911cea0a7b9c0d9341157"
      }
    ],
    "blockNumber": 28809340,
    "cumulativeGasUsed": "8677861",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "e1f56388dee1d58de2a06cc8bf22ef55",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"MG_ACCEPTANCE_PERIOD_EXPIRED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MG_ADDRESS_ZERO\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MG_AGREEMENT_INACTIVE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MG_AGREEMENT_NOT_PENDING\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MG_AMOUNT_TOO_HIGH\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MG_CONTRACTOR_EQUALS_CONTRACTEE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MG_FUNDS_ALREADY_SECURED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MG_INVALID_MATURITY_DATE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MG_INVALID_MIGRATION_PERIOD\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MG_INVALID_TOKEN\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MG_UNAUTHORIZED\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"agreementID\",\"type\":\"uint256\"}],\"name\":\"AgreementActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"agreementID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contractor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contractee\",\"type\":\"address\"}],\"name\":\"AgreementCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"agreement\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"FundsDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"agreement\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"FundsMigrated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"agreementID\",\"type\":\"uint256\"}],\"name\":\"activateAgreement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"agreementNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"agreements\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"AGREEMENT_ID\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"ACCEPTANCE_DEADLINE\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"ACTIVATION_DATE\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"MATURITY_DATE\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"PAYMENT_CYCLE_DURATION\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"PAYMENT_CYCLE_AMOUNT\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"ESTABLISHMENT_FEE_RATE\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"PENALIZATION_AMOUNT\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"UNDERLAYING_TOKEN\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"CONTRACTOR\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"CONTRACTEE\",\"type\":\"address\"}],\"internalType\":\"struct Types.AgreementParameters\",\"name\":\"parameters\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"escrowedFunds\",\"type\":\"uint128\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"closed\",\"type\":\"bool\"}],\"internalType\":\"struct Types.AgreementState\",\"name\":\"state\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"agreementDuration\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"paymentCycleDuration\",\"type\":\"uint128\"}],\"name\":\"calculateMigrationPeriods\",\"outputs\":[{\"internalType\":\"uint128[]\",\"name\":\"migrationPeriods\",\"type\":\"uint128[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"challengeDuration\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"agreementID\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"claimProtocolFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"acceptanceDeadline\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"maturityDate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"paymentCycleDuration\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"paymentCycleAmount\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"underlayingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"contractor\",\"type\":\"address\"}],\"internalType\":\"struct IManager.AgreementCreationParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"createAgreement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"agreementID\",\"type\":\"uint256\"}],\"name\":\"depositFundsForNextCycle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"establishmentFeeRate\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"freezeAgreements\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"agreementID\",\"type\":\"uint256\"}],\"name\":\"getAgreementParameters\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"acceptanceDeadline\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"activationDate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"maturityDate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"paymentCycleDuration\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"paymentCycleAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"establishmentFeeRate_\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"penalizationAmount_\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"underlayingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"contractor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"contractee\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"agreementID\",\"type\":\"uint256\"}],\"name\":\"getAgreementState\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"escrowedFunds\",\"type\":\"uint128\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"closed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserAgreements\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"challengeDuration_\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"governance_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"agreementID\",\"type\":\"uint256\"}],\"name\":\"migrateFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"penalizationAmount\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"challengeDuration_\",\"type\":\"uint128\"}],\"name\":\"setChallengeDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"establishmentFeeRate_\",\"type\":\"uint128\"}],\"name\":\"setEstablishmentFeeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"penalizationAmount_\",\"type\":\"uint128\"}],\"name\":\"setPenalizationAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unfreezeAgreements\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userAgreements\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"activateAgreement(uint256)\":{\"details\":\"The agreement needs to be created, inactive and the funds for the first cycle set\",\"params\":{\"agreementID\":\"The ID of the agreement to activate\"}},\"calculateMigrationPeriods(uint128,uint128)\":{\"details\":\"If there is a remainder, the last migration period will be shorter than the others and fall on the maturity datethe return value is a list of the starting migration periods. To actualy calculate the period you need to add the challenge duration\",\"params\":{\"agreementDuration\":\"The duration of the agreement\",\"paymentCycleDuration\":\"The duration of the payment cycle\"},\"returns\":{\"migrationPeriods\":\"The migration periods for the agreement\"}},\"claimProtocolFees(uint256,uint128,address)\":{\"params\":{\"agreementID\":\"The identifier of the agreement\",\"amount\":\"The amount of tokens claimed\",\"to\":\"The address receiving the fees*\"}},\"createAgreement((uint128,uint128,uint128,uint128,address,address))\":{\"details\":\"The agreement default state is inactive, it needs to be activated by the contractor\",\"params\":{\"params\":\"The parameters of the agreement\"}},\"getAgreementParameters(uint256)\":{\"details\":\"an agreement can be not active because it has not been activated or because it is closed\",\"params\":{\"agreementID\":\"The ID of the agreement\"},\"returns\":{\"acceptanceDeadline\":\"The timestamp the contractor can no longer accept the agreement\",\"activationDate\":\"The timestamp when the agreement was activated\",\"contractee\":\"The address of the contractee\",\"contractor\":\"The address of the contractor\",\"establishmentFeeRate_\":\"The rate of the establishment fee\",\"maturityDate\":\"The date when the agreement expires\",\"paymentCycleAmount\":\"The amount of tokens to be released per payment cycle\",\"paymentCycleDuration\":\"The duration of a payment cycle\",\"penalizationAmount_\":\"The amount of tokens that will be kept in case of a penalization\",\"underlayingToken\":\"The address of the token used for the agreement\"}},\"getAgreementState(uint256)\":{\"params\":{\"active\":\"Whether the agreement is active\",\"agreementID\":\"The ID of the agreement\",\"closed\":\"Whether the agreement is closed\",\"escrowedFunds\":\"The amount of funds escrowed in the agreement\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getUserAgreements(address)\":{\"params\":{\"user\":\"The address of the user\"},\"returns\":{\"_0\":\"agreementIDs The IDs of the agreements\"}},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"migrateFunds(uint256)\":{\"details\":\"Only the keeper or contractee can call this functionA for loop is used to calculate the migration periods instead of storing them on chain to reduce gas costsTo reduce gas costs, the migration periods are calculated inside the function, instead of calling calculateMigrationPeriodsIf there is a remainder, the last migration period will be shorter than the others and fall on the maturity date\",\"params\":{\"agreementID\":\"The ID of the agreement to release the funds for\"}},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"setChallengeDuration(uint128)\":{\"params\":{\"challengeDuration_\":\"The new challenge duration\"}},\"setEstablishmentFeeRate(uint128)\":{\"params\":{\"establishmentFeeRate_\":\"The new establishment fee rate\"}},\"setPenalizationAmount(uint128)\":{\"params\":{\"penalizationAmount_\":\"The new penalization amount\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"events\":{\"AgreementActivated(uint256)\":{\"notice\":\"Emitted after a agreement was activated\"},\"AgreementCreated(uint256,address,address)\":{\"notice\":\"Emitted after a event was creted\"},\"FundsDeposited(uint256,uint128)\":{\"notice\":\"Emitted after funds are deposited for the upcoming cycle \"},\"FundsMigrated(uint256,uint128)\":{\"notice\":\"Emitted after funds were migrated\"}},\"kind\":\"user\",\"methods\":{\"activateAgreement(uint256)\":{\"notice\":\"Activates an agreement\"},\"calculateMigrationPeriods(uint128,uint128)\":{\"notice\":\"Calculates the migration periods for an agreement\"},\"claimProtocolFees(uint256,uint128,address)\":{\"notice\":\"Withdraws protocol fees to a target address\"},\"createAgreement((uint128,uint128,uint128,uint128,address,address))\":{\"notice\":\"Creates a new agreement\"},\"freezeAgreements()\":{\"notice\":\"Stops all actions on all agreements*\"},\"getAgreementParameters(uint256)\":{\"notice\":\"Returns the parameters of an agreement\"},\"getAgreementState(uint256)\":{\"notice\":\"Returns the state of an agreement\"},\"getUserAgreements(address)\":{\"notice\":\"Returns the user agreements\"},\"migrateFunds(uint256)\":{\"notice\":\"Releases the funds for the current payment cycle\"},\"setChallengeDuration(uint128)\":{\"notice\":\"Sets the challenge duration for all agreements\"},\"setEstablishmentFeeRate(uint128)\":{\"notice\":\"Set the establishment protocol fee rate\"},\"setPenalizationAmount(uint128)\":{\"notice\":\"Set the penalization amount for the protocol\"},\"unfreezeAgreements()\":{\"notice\":\"Cancel a freeze, makes actions available again on all agreements*\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/Manager.sol\":\"Manager\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0-rc.1) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xd25b5dd88ee621810335aa7272faeeb2a4c4151b19ce4ac0d7ce75a347bb53b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0-rc.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0xf2efdd01f01f127e8b631675a359cd8cabfbcdcd2e8587ecf906181bcd667bc9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0-rc.1) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xabed77589961adbaaa36817e0914bcbe4c447311c9451bf3fc9b073c1f092d8d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0-rc.1) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0x992b28e9cd85d3614bf2f0ad8225164128abdf44fb533db8587e8a64e0d9883c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0-rc.1) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x382f704a068eb9b9e3c73c7acef54b464043aa12ea0abacfd0b8440c6e1e4e4f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"src/Manager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"./lib/IManager.sol\\\";\\nimport \\\"./lib/Types.sol\\\";\\nimport \\\"./lib/Roles.sol\\\";\\nimport \\\"./lib/Errors.sol\\\";\\n\\n/**\\n * @title IManager\\n * @author Contractful Labs\\n * @notice Lets users create and manage contract work agreements\\n */\\n\\npragma solidity ^0.8.0;\\n\\ncontract Manager is IManager, AccessControlUpgradeable, PausableUpgradeable {\\n  // General values. Only modifiable by Roles.GOVERNANCE\\n  uint128 public penalizationAmount;\\n  uint128 public challengeDuration;\\n  uint128 public establishmentFeeRate;\\n  uint256 internal accruedEstablishmentFee = 0;\\n\\n  // These variables will be removed soon once the proxy implementation is updated.\\n  uint256 public agreementNonce = 1;\\n  mapping(address => uint256[]) public userAgreements;\\n\\n  // agreement ID to agreement\\n  mapping(uint256 => Types.Agreement) public agreements;\\n\\n  modifier whenActive(Types.Agreement storage agreement) {\\n    if (!agreement.state.active) {\\n      revert Errors.MG_AGREEMENT_INACTIVE();\\n    }\\n    _;\\n  }\\n\\n  modifier whenPending(Types.Agreement storage agreement) {\\n    if (agreement.state.closed || agreement.state.active) {\\n      revert Errors.MG_AGREEMENT_NOT_PENDING();\\n    }\\n    _;\\n  }\\n\\n  modifier onlyAuthorized(Types.Agreement storage agreement) {\\n    if (\\n      agreement.parameters.CONTRACTEE != msg.sender &&\\n      !hasRole(Roles.KEEPER_ROLE, msg.sender) &&\\n      !hasRole(Roles.GOVERNANCE_ROLE, msg.sender)\\n    ) {\\n      revert Errors.MG_UNAUTHORIZED();\\n    }\\n    _;\\n  }\\n\\n  function initialize(uint128 challengeDuration_, address governance_) public initializer {\\n    /* Both initializers below are called to comply with OpenZeppelin's\\n    recommendations even if in practice they don't do anything */\\n    __AccessControl_init();\\n    __Pausable_init_unchained();\\n\\n    challengeDuration = challengeDuration_;\\n\\n    if (governance_ == address(0)) {\\n      // Prevent setting governance_ to null account\\n      governance_ = _msgSender();\\n    }\\n\\n    _grantRole(DEFAULT_ADMIN_ROLE, governance_);\\n    _grantRole(Roles.GOVERNANCE_ROLE, governance_);\\n    _setRoleAdmin(Roles.KEEPER_ROLE, Roles.GOVERNANCE_ROLE);\\n  }\\n\\n  /**\\n   * @notice Creates a new agreement\\n   * @param params The parameters of the agreement\\n   * @dev The agreement default state is inactive, it needs to be activated by the contractor\\n   */\\n  function createAgreement(AgreementCreationParams calldata params) external whenNotPaused {\\n    assert(agreements[agreementNonce].parameters.AGREEMENT_ID == 0);\\n\\n    if (params.contractor == address(0)) {\\n      revert Errors.MG_ADDRESS_ZERO();\\n    }\\n\\n    if (params.contractor == msg.sender) {\\n      revert Errors.MG_CONTRACTOR_EQUALS_CONTRACTEE();\\n    }\\n\\n    if (params.underlayingToken == address(0)) {\\n      revert Errors.MG_INVALID_TOKEN();\\n    }\\n\\n    if (params.maturityDate <= block.timestamp) {\\n      revert Errors.MG_INVALID_MATURITY_DATE();\\n    }\\n\\n    // Secure the funds for the first cycle\\n    SafeERC20.safeTransferFrom(IERC20(params.underlayingToken), msg.sender, address(this), params.paymentCycleAmount);\\n\\n    agreements[agreementNonce].parameters = Types.AgreementParameters({\\n      AGREEMENT_ID: agreementNonce,\\n      ACCEPTANCE_DEADLINE: params.acceptanceDeadline,\\n      ACTIVATION_DATE: 0,\\n      MATURITY_DATE: params.maturityDate,\\n      PAYMENT_CYCLE_DURATION: params.paymentCycleDuration,\\n      PAYMENT_CYCLE_AMOUNT: params.paymentCycleAmount,\\n      ESTABLISHMENT_FEE_RATE: establishmentFeeRate,\\n      PENALIZATION_AMOUNT: penalizationAmount,\\n      UNDERLAYING_TOKEN: params.underlayingToken,\\n      CONTRACTOR: params.contractor,\\n      CONTRACTEE: msg.sender \\n    });\\n\\n    userAgreements[msg.sender].push(agreementNonce);\\n    userAgreements[params.contractor].push(agreementNonce);\\n\\n    emit AgreementCreated(agreementNonce, params.contractor, msg.sender);\\n    agreementNonce++;\\n  }\\n\\n  /**\\n   * @notice Activates an agreement\\n   * @param agreementID The ID of the agreement to activate\\n   * @dev The agreement needs to be created, inactive and the funds for the first cycle set\\n   */\\n  function activateAgreement(uint256 agreementID) external whenPending(agreements[agreementID]) {\\n    Types.Agreement storage agreement = agreements[agreementID];\\n\\n    if (agreement.parameters.CONTRACTOR != msg.sender) {\\n      revert Errors.MG_UNAUTHORIZED();\\n    }\\n\\n    if(block.timestamp > agreement.parameters.ACCEPTANCE_DEADLINE){\\n      revert Errors.MG_ACCEPTANCE_PERIOD_EXPIRED();\\n    }\\n\\n    agreement.parameters.ACTIVATION_DATE = uint128(block.timestamp);\\n    agreement.state.active = true;\\n\\n    userAgreements[msg.sender].push(agreementNonce);\\n\\n    emit AgreementActivated(agreementID);\\n  }\\n\\n  /**\\n   * @notice Releases the funds for the current payment cycle\\n   * @param agreementID The ID of the agreement to release the funds for\\n   * @dev Only the keeper or contractee can call this function\\n   * @dev A for loop is used to calculate the migration periods instead of storing them on chain to reduce gas costs\\n   * @dev To reduce gas costs, the migration periods are calculated inside the function, instead of calling calculateMigrationPeriods\\n   * @dev If there is a remainder, the last migration period will be shorter than the others and fall on the maturity date\\n   */\\n  function migrateFunds(uint256 agreementID)\\n    external\\n    whenNotPaused\\n    whenActive(agreements[agreementID])\\n    onlyAuthorized(agreements[agreementID])\\n  {\\n    Types.Agreement storage agreement = agreements[agreementID];\\n\\n    uint128 agreementDuration = agreement.parameters.MATURITY_DATE - agreement.parameters.ACTIVATION_DATE;\\n    uint128 migrations = agreementDuration / agreement.parameters.PAYMENT_CYCLE_DURATION;\\n    bool validMigrationPeriod = false;\\n    bool reminder = agreementDuration % agreement.parameters.PAYMENT_CYCLE_DURATION != 0;\\n    for (uint128 i = 0; i < migrations; i++) {\\n      uint128 migrationPeriod = agreement.parameters.ACTIVATION_DATE +\\n        (agreement.parameters.PAYMENT_CYCLE_DURATION * (i + 1));\\n      if (block.timestamp >= migrationPeriod) {\\n        if (block.timestamp <= migrationPeriod + challengeDuration) {\\n          validMigrationPeriod = true;\\n          break;\\n        }\\n      } else {\\n        break;\\n      }\\n    }\\n    if (!validMigrationPeriod) {\\n      if (reminder) {\\n        if (\\n          block.timestamp >= agreement.parameters.MATURITY_DATE &&\\n          block.timestamp <= agreement.parameters.MATURITY_DATE + challengeDuration\\n        ) {\\n          validMigrationPeriod = true;\\n        }\\n      }\\n    }\\n\\n    if (!validMigrationPeriod) {\\n      revert Errors.MG_INVALID_MIGRATION_PERIOD();\\n    }\\n\\n    uint128 normalizedPaymentAmount = (agreement.parameters.PAYMENT_CYCLE_AMOUNT * establishmentFeeRate) / 100;\\n    accruedEstablishmentFee += agreement.parameters.PAYMENT_CYCLE_AMOUNT - normalizedPaymentAmount;\\n\\n    SafeERC20.safeTransfer(\\n      IERC20(agreement.parameters.UNDERLAYING_TOKEN),\\n      agreement.parameters.CONTRACTOR,\\n      normalizedPaymentAmount\\n    );\\n\\n    emit FundsMigrated(agreementID, agreement.parameters.PAYMENT_CYCLE_AMOUNT);\\n  }\\n\\n  function depositFundsForNextCycle(uint256 agreementID)\\n    external\\n    whenNotPaused\\n    whenActive(agreements[agreementID])\\n    onlyAuthorized(agreements[agreementID])\\n  {\\n    Types.Agreement storage agreement = agreements[agreementID];\\n    if (agreement.state.escrowedFunds != 0) {\\n      revert Errors.MG_FUNDS_ALREADY_SECURED();\\n    }\\n\\n    agreement.state.escrowedFunds += agreement.parameters.PAYMENT_CYCLE_AMOUNT;\\n    SafeERC20.safeTransferFrom(\\n      IERC20(agreement.parameters.UNDERLAYING_TOKEN),\\n      agreement.parameters.CONTRACTEE,\\n      address(this),\\n      agreement.parameters.PAYMENT_CYCLE_AMOUNT\\n    );\\n\\n    emit FundsDeposited(agreementID, agreement.parameters.PAYMENT_CYCLE_AMOUNT);\\n  }\\n\\n  // View Methods\\n\\n  /**\\n   * @notice Calculates the migration periods for an agreement\\n   * @param agreementDuration The duration of the agreement\\n   * @param paymentCycleDuration The duration of the payment cycle\\n   * @return migrationPeriods The migration periods for the agreement\\n   * @dev If there is a remainder, the last migration period will be shorter than the others and fall on the maturity date\\n   * @dev the return value is a list of the starting migration periods. To actualy calculate the period you need to add the challenge duration\\n   */\\n  function calculateMigrationPeriods(uint128 agreementDuration, uint128 paymentCycleDuration)\\n    public\\n    view\\n    returns (uint128[] memory migrationPeriods)\\n  {\\n    Types.Agreement storage agreement = agreements[agreementNonce];\\n\\n    uint128 migrations = agreementDuration / paymentCycleDuration;\\n    bool reminder = agreementDuration % paymentCycleDuration != 0;\\n\\n    for (uint128 i = 0; i < migrations; i++) {\\n      migrationPeriods[i] = agreement.parameters.ACTIVATION_DATE + (paymentCycleDuration * i + 1);\\n    }\\n    if (reminder) {\\n      migrationPeriods[migrations] = agreement.parameters.MATURITY_DATE;\\n    }\\n  }\\n\\n  /**\\n   * @notice Returns the parameters of an agreement\\n   * @param agreementID The ID of the agreement\\n   * @return acceptanceDeadline The timestamp the contractor can no longer accept the agreement\\n   * @return activationDate The timestamp when the agreement was activated\\n   * @return maturityDate The date when the agreement expires\\n   * @return paymentCycleDuration The duration of a payment cycle\\n   * @return paymentCycleAmount The amount of tokens to be released per payment cycle\\n   * @return establishmentFeeRate_ The rate of the establishment fee\\n   * @return penalizationAmount_ The amount of tokens that will be kept in case of a penalization\\n   * @return underlayingToken The address of the token used for the agreement\\n   * @return contractor The address of the contractor\\n   * @return contractee The address of the contractee\\n   * @dev an agreement can be not active because it has not been activated or because it is closed\\n   */\\n  function getAgreementParameters(uint256 agreementID)\\n    external\\n    view\\n    returns (\\n      uint128 acceptanceDeadline,\\n      uint128 activationDate,\\n      uint128 maturityDate,\\n      uint128 paymentCycleDuration,\\n      uint128 paymentCycleAmount,\\n      uint128 establishmentFeeRate_,\\n      uint128 penalizationAmount_,\\n      address underlayingToken,\\n      address contractor,\\n      address contractee\\n    )\\n  {\\n    Types.Agreement storage agreement = agreements[agreementID];\\n    return (\\n      agreement.parameters.ACCEPTANCE_DEADLINE,\\n      agreement.parameters.ACTIVATION_DATE,\\n      agreement.parameters.MATURITY_DATE,\\n      agreement.parameters.PAYMENT_CYCLE_DURATION,\\n      agreement.parameters.PAYMENT_CYCLE_AMOUNT,\\n      agreement.parameters.ESTABLISHMENT_FEE_RATE,\\n      agreement.parameters.PENALIZATION_AMOUNT,\\n      agreement.parameters.UNDERLAYING_TOKEN,\\n      agreement.parameters.CONTRACTOR,\\n      agreement.parameters.CONTRACTEE\\n    );\\n  }\\n\\n  /**\\n   * @notice Returns the state of an agreement\\n   * @param agreementID The ID of the agreement\\n   * @param escrowedFunds The amount of funds escrowed in the agreement\\n   * @param active Whether the agreement is active\\n   * @param closed Whether the agreement is closed\\n   */\\n  function getAgreementState(uint256 agreementID)\\n    external\\n    view\\n    returns (\\n      uint128 escrowedFunds,\\n      bool active,\\n      bool closed\\n    )\\n  {\\n    Types.Agreement storage agreement = agreements[agreementID];\\n    return (agreement.state.escrowedFunds, agreement.state.active, agreement.state.closed);\\n  }\\n\\n/**\\n* @notice Returns the user agreements\\n* @param user The address of the user\\n* @return agreementIDs The IDs of the agreements\\n */\\n  function getUserAgreements(address user) view external returns (uint256[] memory) {\\n    return userAgreements[user];\\n  }\\n\\n  // Managment methods. Only callable by Roles.GOVERNACE_ROLE\\n\\n  /**\\n   * @notice Sets the challenge duration for all agreements\\n   * @param challengeDuration_ The new challenge duration\\n   */\\n  function setChallengeDuration(uint128 challengeDuration_) external onlyRole(Roles.GOVERNANCE_ROLE) {\\n    challengeDuration = challengeDuration_;\\n  }\\n\\n  /**\\n   * @notice Set the establishment protocol fee rate\\n   * @param establishmentFeeRate_ The new establishment fee rate\\n   */\\n  function setEstablishmentFeeRate(uint128 establishmentFeeRate_) external onlyRole(Roles.GOVERNANCE_ROLE) {\\n    establishmentFeeRate = establishmentFeeRate_;\\n  }\\n\\n  /**\\n   * @notice Set the penalization amount for the protocol\\n   * @param penalizationAmount_ The new penalization amount\\n   */\\n  function setPenalizationAmount(uint128 penalizationAmount_) external onlyRole(Roles.GOVERNANCE_ROLE) {\\n    establishmentFeeRate = penalizationAmount_;\\n  }\\n\\n  /**\\n   * @notice Withdraws protocol fees to a target address\\n   * @param agreementID The identifier of the agreement\\n   * @param amount The amount of tokens claimed\\n   * @param to The address receiving the fees\\n   **/\\n  function claimProtocolFees(\\n    uint256 agreementID,\\n    uint128 amount,\\n    address to\\n  ) external onlyRole(Roles.GOVERNANCE_ROLE) {\\n    if (amount > accruedEstablishmentFee) {\\n      revert Errors.MG_AMOUNT_TOO_HIGH();\\n    }\\n    Types.Agreement storage agreement = agreements[agreementID];\\n    SafeERC20.safeTransfer(IERC20(agreement.parameters.UNDERLAYING_TOKEN), to, amount);\\n  }\\n\\n  /**\\n   * @notice Stops all actions on all agreements\\n   **/\\n  function freezeAgreements() external onlyRole(Roles.GOVERNANCE_ROLE) {\\n    _pause();\\n  }\\n\\n  /**\\n   * @notice Cancel a freeze, makes actions available again on all agreements\\n   **/\\n  function unfreezeAgreements() external onlyRole(Roles.GOVERNANCE_ROLE) {\\n    _unpause();\\n  }\\n}\\n\",\"keccak256\":\"0x1ed9d8eee5e3164f2ad57ada4f7f4b50ba9bc28b6f7a05723f6b3260c555ac03\",\"license\":\"MIT\"},\"src/lib/Errors.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary Errors {\\n  // *** Contract Specific Errors ***\\n  // Manager Contract \\n  error MG_AGREEMENT_CLOSED(); // \\\"The agreement is closed\\\"\\n  error MG_AGREEMENT_INACTIVE(); // \\\"The agreement is inactive. This might because the agreement has not been activated or because it has been closed\\\"\\n  error MG_AGREEMENT_NOT_PENDING(); // \\\"The agreement is not pending. It can be active or closed\\\"\\n  error MG_UNAUTHORIZED(); // \\\"msg.sender lacks the authorizations required\\\"\\n  error MG_CONTRACTOR_EQUALS_CONTRACTEE(); // \\\"The contractor and the contractee cannot be the same\\\"\\n  error MG_INVALID_MATURITY_DATE(); // \\\"The maturity date must be in the future\\\"\\n  error MG_INVALID_TOKEN(); // \\\"The token is not an accepted token. It probably is a zero address\\\"\\n  error MG_ADDRESS_ZERO(); // \\\"The address cannot be zero\\\"\\n  error MG_INVALID_MIGRATION_PERIOD(); // \\\"The migration period is not valid\\\"\\n  error MG_AMOUNT_TOO_HIGH(); // \\\"The amount is too high\\\"\\n  error MG_FUNDS_ALREADY_SECURED(); // \\\"The funds are already secured\\\"\\n  error MG_ACCEPTANCE_PERIOD_EXPIRED(); // \\\"The acceptance period has expired\\\"\\n}\\n  \",\"keccak256\":\"0xf0ddf2c4eeda1adb67d493534ea08ccd8a7b8e22fa9b74137ba62e0f3db4e831\",\"license\":\"MIT\"},\"src/lib/IManager.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title IManager\\n * @author Contractful Labs\\n * @notice Lets users create and manage contract work agreements\\n */\\n\\ninterface IManager {\\n  // EVENTS\\n\\n  /**\\n   * @notice Emitted after a event was creted\\n   * @param agreementID The ID of the agreement\\n   * @param contractor The address of the contractor\\n   * @param contractee The address of the contractee\\n   **/\\n  event AgreementCreated(uint256 agreementID, address contractor, address contractee);\\n\\n  /**\\n   * @notice Emitted after a agreement was activated\\n   * @param agreementID The ID of the agreement\\n   **/\\n  event AgreementActivated(uint256 agreementID);\\n\\n  /**\\n   * @notice Emitted after funds were migrated\\n   * @param agreement The ID of the agreement\\n   * @param amount The amount of tokens that were migrated\\n   **/\\n  event FundsMigrated(uint256 agreement, uint128 amount);\\n\\n  /**\\n  * @notice Emitted after funds are deposited for the upcoming cycle \\n  * @param agreement The ID of the agreement\\n  * @param amount The amount of tokens that were deposited\\n   */\\n  event FundsDeposited(uint256 agreement, uint128 amount);\\n\\n  // VIEW Methods\\n\\n  /**\\n   * @notice Returns the parameters of an agreement\\n   * @param agreementID The ID of the agreement\\n   * @return acceptanceDeadline The timestamp the contractor can no longer accept the agreement\\n   * @return activationDate The timestamp when the agreement was activated\\n   * @return maturityDate The date when the agreement expires\\n   * @return paymentCycleDuration The duration of a payment cycle\\n   * @return paymentCycleAmount The amount of tokens to be released per payment cycle\\n   * @return establishmentFeeRate The rate of the establishment fee\\n   * @return penalizationAmount The amount of tokens that will be kept in case of a penalization\\n   * @return underlayingToken The address of the token used for the agreement\\n   * @return contractor The address of the contractor\\n   * @return contractee The address of the contractee\\n   * @dev an agreement can be not active because it has not been activated or because it is closed\\n   */\\n  function getAgreementParameters(uint256 agreementID)\\n    external\\n    view\\n    returns (\\n      uint128 acceptanceDeadline,\\n      uint128 activationDate,\\n      uint128 maturityDate,\\n      uint128 paymentCycleDuration,\\n      uint128 paymentCycleAmount,\\n      uint128 establishmentFeeRate,\\n      uint128 penalizationAmount,\\n      address underlayingToken,\\n      address contractor,\\n      address contractee\\n    );\\n\\n  // MUTATIVE Methods\\n\\n  struct AgreementCreationParams {\\n    uint128 acceptanceDeadline;\\n    uint128 maturityDate;\\n    uint128 paymentCycleDuration;\\n    uint128 paymentCycleAmount;\\n    address underlayingToken;\\n    address contractor;\\n  }\\n\\n  /**\\n   * @notice Creates a new agreement\\n   * @param params The parameters of the agreement\\n   */\\n  function createAgreement(AgreementCreationParams calldata params) external;\\n\\n  /**\\n   * @notice Activates an agreement\\n   * @param agreementID The ID of the agreement to activate\\n   */\\n  function activateAgreement(uint256 agreementID) external;\\n\\n  /**\\n   * @notice Set the establishment protocol fee rate\\n   **/\\n  function setEstablishmentFeeRate(uint128 establishmentFeeRate) external;\\n\\n  /**\\n   * @notice Releases the funds for the current payment cycle\\n   * @param agreementID The ID of the agreement to release the funds for\\n   */\\n  function migrateFunds(uint256 agreementID) external;\\n\\n  /**\\n   * @notice Withdraws protocol fees to a target address\\n   * @param agreementID The identifier of the agreement\\n   * @param amount The amount of tokens claimed\\n   * @param to The address receiving the fees\\n   **/\\n  function claimProtocolFees(\\n    uint256 agreementID,\\n    uint128 amount,\\n    address to\\n  ) external;\\n\\n  /**\\n   * @notice Stops all actions on all agreements\\n   **/\\n  function freezeAgreements() external;\\n\\n  /**\\n   * @notice Cancel a freeze, makes actions available again on all agreements\\n   **/\\n  function unfreezeAgreements() external;\\n}\\n\",\"keccak256\":\"0xb4e1e78d738910cc5ac4790e010d1e79ad0a003870d45c852ea63468f4944f12\",\"license\":\"AGPL-3.0\"},\"src/lib/Roles.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary Roles {\\n  bytes32 public constant GOVERNANCE_ROLE = keccak256(\\\"GOVERNANCE_ROLE\\\");\\n  bytes32 public constant KEEPER_ROLE = keccak256(\\\"KEEPER_ROLE\\\");\\n}\\n\",\"keccak256\":\"0xe03289aef551538ce8e18b8a3a37ad8f37627122b16305ee1a1a3fbd4be5ceed\",\"license\":\"MIT\"},\"src/lib/Types.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\nlibrary Types {\\n/* The protocol's fee rate and penalization amount are stored in each agreement so if they changes, they will not affect\\n previous agreements */\\n  struct AgreementParameters{\\n    uint256 AGREEMENT_ID;\\n    uint128 ACCEPTANCE_DEADLINE;\\n    uint128 ACTIVATION_DATE;\\n    uint128 MATURITY_DATE;\\n    uint128 PAYMENT_CYCLE_DURATION;\\n    uint128 PAYMENT_CYCLE_AMOUNT;\\n    uint128 ESTABLISHMENT_FEE_RATE; \\n    uint128 PENALIZATION_AMOUNT;\\n    address UNDERLAYING_TOKEN;\\n    address CONTRACTOR;\\n    address CONTRACTEE;\\n  }\\n\\n  struct AgreementState {\\n    uint128 escrowedFunds;\\n    bool active;\\n    bool closed;\\n  }\\n\\n  struct Agreement {\\n    AgreementParameters parameters;\\n    AgreementState state;\\n  }\\n}\\n\",\"keccak256\":\"0x353d46b34a0527ce145bf667c619ff4909993dd2e77ab3f963eebed0127a1fe2\",\"license\":\"AGPL-3.0\"}},\"version\":1}",
  "bytecode": "0x6080604052600060cb55600160cc5534801561001a57600080fd5b506125168061002a6000396000f3fe608060405234801561001057600080fd5b50600436106101cf5760003560e01c80634c27984e11610104578063a0cc8d2c116100a2578063bd14de9611610071578063bd14de961461042d578063d547741f14610533578063de64039014610546578063e86295141461055957600080fd5b8063a0cc8d2c146103e9578063a217fddf146103f2578063a63197d2146103fa578063adb9cae61461040d57600080fd5b806363f749f5116100de57806363f749f5146103525780638aa6ded5146103bb57806391d14854146103ce57806392d5b544146103e157600080fd5b80634c27984e146103215780635c975abb1461033457806362e414a41461033f57600080fd5b806329a6886e116101715780633a67c2f81161014b5780633a67c2f8146102e85780633bc52866146102fb578063419ffe2c1461030e578063429fba4a1461025d57600080fd5b806329a6886e146102a25780632f2ff15d146102c257806336568abe146102d557600080fd5b80631be25067116101ad5780631be2506714610219578063248a9ca31461022c578063291420b31461025d578063292f2e0e1461027057600080fd5b806301ffc9a7146101d45780630bd30c12146101fc5780631333f2b714610206575b600080fd5b6101e76101e2366004611e65565b61064b565b60405190151581526020015b60405180910390f35b610204610682565b005b610204610214366004611eab565b6106a5565b610204610227366004611ec6565b6106dd565b61024f61023a366004611ede565b60009081526065602052604090206001015490565b6040519081526020016101f3565b61020461026b366004611eab565b610ac8565b60c95461028a90600160801b90046001600160801b031681565b6040516001600160801b0390911681526020016101f3565b6102b56102b0366004611ef7565b610b03565b6040516101f39190611f2a565b6102046102d0366004611f8e565b610c2a565b6102046102e3366004611f8e565b610c54565b6102046102f6366004611fb1565b610cd7565b610204610309366004611ede565b610e79565b60c95461028a906001600160801b031681565b61024f61032f366004611fdb565b61120e565b60975460ff166101e7565b61020461034d366004612005565b61123f565b610394610360366004611ede565b600090815260ce60205260409020600801546001600160801b0381169160ff600160801b8304811692600160881b90041690565b604080516001600160801b03909416845291151560208401521515908201526060016101f3565b60ca5461028a906001600160801b031681565b6101e76103dc366004611f8e565b6112ba565b6102046112e5565b61024f60cc5481565b61024f600081565b610204610408366004611ede565b611305565b61042061041b366004612041565b6114d2565b6040516101f3919061205c565b61052561043b366004611ede565b60ce602090815260009182526040918290208251610160810184528154815260018201546001600160801b0380821683860152600160801b9182900481168387015260028401548082166060808601919091529083900482166080850152600385015480831660a0860152839004821660c08501526004850154821660e085015260058501546001600160a01b039081166101008601526006860154811661012086015260078601541661014085015286519081018752600890940154908116845260ff9181048216151594840194909452600160881b9093049092161515928101929092529082565b6040516101f3929190612094565b610204610541366004611f8e565b61153e565b610204610554366004611ede565b611563565b6105dd610567366004611ede565b600090815260ce602052604090206001810154600282015460038301546004840154600585015460068601546007909601546001600160801b0380871698600160801b978890048216988288169897889004831697838816970483169592909216936001600160a01b0390811693928116921690565b604080516001600160801b039b8c168152998b1660208b0152978a16978901979097529488166060880152928716608087015290861660a086015290941660c08401526001600160a01b0393841660e0840152831661010083015291909116610120820152610140016101f3565b60006001600160e01b03198216637965db0b60e01b148061067c57506301ffc9a760e01b6001600160e01b03198316145b92915050565b6000805160206124c183398151915261069a816116a7565b6106a26116b1565b50565b6000805160206124c18339815191526106bd816116a7565b5060c980546001600160801b03928316600160801b029216919091179055565b6106e5611703565b60cc54600090815260ce602052604090205415610704576107046121bf565b600061071660c0830160a08401612041565b6001600160a01b03160361073d576040516305bf1d9d60e21b815260040160405180910390fd5b3361074e60c0830160a08401612041565b6001600160a01b031603610775576040516346a4b5e960e01b815260040160405180910390fd5b600061078760a0830160808401612041565b6001600160a01b0316036107ae57604051639b84273b60e01b815260040160405180910390fd5b426107bf6040830160208401611eab565b6001600160801b0316116107e657604051630dcde81360e11b815260040160405180910390fd5b6108196107f960a0830160808401612041565b333061080b6080860160608701611eab565b6001600160801b031661174b565b60408051610160810190915260cc54815260208082019061083c90840184611eab565b6001600160801b0316815260200160006001600160801b0316815260200182602001602081019061086d9190611eab565b6001600160801b0316815260200161088b6060840160408501611eab565b6001600160801b031681526020016108a96080840160608501611eab565b6001600160801b03908116825260ca548116602083015260c9541660408201526060016108dc60a0840160808501612041565b6001600160a01b031681526020016108fa60c0840160a08501612041565b6001600160a01b03908116825233602092830181905260cc8054600090815260ce855260408082208751815587870151888301516001600160801b03918216600160801b91831682021760018085019190915560608b015160808c0151908416908416830217600285015560a0808c015160c0808e015191861691861690940217600386015560e08c01516004860180546001600160801b03191691909516179093556101008b01516005850180546001600160a01b0319908116928c169290921790556101208c01516006860180548316918c16919091179055610140909b015160079094018054909b16939098169290921790985593825260cd8087529082209254835495860184559282529481209093015591929091610a2291908501908501612041565b6001600160a01b03168152602080820192909252604001600090812060cc80548254600181018455928452939092200191909155547fe037ec30313eecdd927ffae3beed86a87b82f7bb794966ec08d75cf1a6e8268690610a8960c0840160a08501612041565b604080519283526001600160a01b039091166020830152339082015260600160405180910390a160cc8054906000610ac0836121eb565b919050555050565b6000805160206124c1833981519152610ae0816116a7565b5060ca80546001600160801b0319166001600160801b0392909216919091179055565b60cc54600090815260ce60205260408120606091610b21848661221a565b90506000610b2f8587612240565b6001600160801b03161515905060005b826001600160801b0316816001600160801b03161015610bd257610b638187612266565b610b6e906001612291565b6001850154610b8d9190600160801b90046001600160801b0316612291565b85826001600160801b031681518110610ba857610ba86122b8565b6001600160801b039092166020928302919091019091015280610bca816122ce565b915050610b3f565b508015610c2157600283015484516001600160801b03918216918691908516908110610c0057610c006122b8565b60200260200101906001600160801b031690816001600160801b0316815250505b50505092915050565b600082815260656020526040902060010154610c45816116a7565b610c4f83836117bc565b505050565b6001600160a01b0381163314610cc95760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b610cd38282611842565b5050565b600054610100900460ff1615808015610cf75750600054600160ff909116105b80610d115750303b158015610d11575060005460ff166001145b610d745760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610cc0565b6000805460ff191660011790558015610d97576000805461ff0019166101001790555b610d9f6118a9565b610da76118d0565b60c980546001600160801b03808616600160801b0291161790556001600160a01b038216610dd3573391505b610dde6000836117bc565b610df66000805160206124c1833981519152836117bc565b610e2e7ffc8737ab85eb45125971625a9ebdb75cc78e01d5c1fa80c4c6e5203f47bc4fab6000805160206124c1833981519152611903565b8015610c4f576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a1505050565b610e81611703565b600081815260ce602052604090206008810154600160801b900460ff16610ebb57604051630804c32d60e31b815260040160405180910390fd5b600082815260ce6020526040902060078101546001600160a01b03163314801590610f0d5750610f0b7ffc8737ab85eb45125971625a9ebdb75cc78e01d5c1fa80c4c6e5203f47bc4fab336112ba565b155b8015610f2e5750610f2c6000805160206124c1833981519152336112ba565b155b15610f4c576040516303135bad60e61b815260040160405180910390fd5b600083815260ce6020526040812060018101546002820154919291610f84916001600160801b03600160801b909104811691166122f4565b6002830154909150600090610fa990600160801b90046001600160801b03168361221a565b60028401549091506000908190610fd090600160801b90046001600160801b031685612240565b6001600160801b03161515905060005b836001600160801b0316816001600160801b031610156110ab576000611007826001612291565b60028801546110269190600160801b90046001600160801b0316612266565b60018801546110459190600160801b90046001600160801b0316612291565b9050806001600160801b031642106110925760c95461107490600160801b90046001600160801b031682612291565b6001600160801b0316421161108d5760019350506110ab565b611098565b506110ab565b50806110a3816122ce565b915050610fe0565b508161110b57801561110b5760028501546001600160801b03164210801590611101575060c95460028601546110f4916001600160801b03600160801b90910481169116612291565b6001600160801b03164211155b1561110b57600191505b81611129576040516381c4a38760e01b815260040160405180910390fd5b60ca54600386015460009160649161114d916001600160801b039081169116612266565b611157919061221a565b60038701549091506111739082906001600160801b03166122f4565b6001600160801b031660cb600082825461118d9190612314565b9091555050600586015460068701546111bc916001600160a01b0390811691166001600160801b03841661194e565b6003860154604080518b81526001600160801b0390921660208301527f101b32dc248c08277c4e9a662cd218570f12dccd5a0166380a12991934175f15910160405180910390a1505050505050505050565b60cd602052816000526040600020818154811061122a57600080fd5b90600052602060002001600091509150505481565b6000805160206124c1833981519152611257816116a7565b60cb54836001600160801b0316111561128357604051630c7c9a7f60e11b815260040160405180910390fd5b600084815260ce6020526040902060058101546112b3906001600160a01b0316846001600160801b03871661194e565b5050505050565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6000805160206124c18339815191526112fd816116a7565b6106a261197e565b61130d611703565b600081815260ce602052604090206008810154600160801b900460ff1661134757604051630804c32d60e31b815260040160405180910390fd5b600082815260ce6020526040902060078101546001600160a01b0316331480159061139957506113977ffc8737ab85eb45125971625a9ebdb75cc78e01d5c1fa80c4c6e5203f47bc4fab336112ba565b155b80156113ba57506113b86000805160206124c1833981519152336112ba565b155b156113d8576040516303135bad60e61b815260040160405180910390fd5b600083815260ce6020526040902060088101546001600160801b031615611412576040516351f16c9360e11b815260040160405180910390fd5b60038101546008820180546001600160801b039283169260009161143891859116612291565b82546101009290920a6001600160801b0381810219909316918316021790915560058301546007840154600385015461148594506001600160a01b0392831693929091169130911661174b565b6003810154604080518681526001600160801b0390921660208301527fd91647d68fadbc904f923d642788552eca006a63f0a8e08d123f6c901d963051910160405180910390a150505050565b6001600160a01b038116600090815260cd602090815260409182902080548351818402810184019094528084526060939283018282801561153257602002820191906000526020600020905b81548152602001906001019080831161151e575b50505050509050919050565b600082815260656020526040902060010154611559816116a7565b610c4f8383611842565b600081815260ce602052604090206008810154600160881b900460ff168061159657506008810154600160801b900460ff165b156115b457604051638549e3e360e01b815260040160405180910390fd5b600082815260ce6020526040902060068101546001600160a01b031633146115ef576040516303135bad60e61b815260040160405180910390fd5b60018101546001600160801b031642111561161d576040516327d8e54760e01b815260040160405180910390fd5b600181810180546001600160801b03908116600160801b4290921682021790915560088301805460ff60801b1916909117905533600090815260cd6020908152604080832060cc5481549586018255908452928290209093019190915590518481527fea49e8aa1bbaa9a7b16632ed4aba908b3c702861a23436c8356e296c228cc2789101610e6c565b6106a281336119bb565b6116b9611a14565b6097805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b60975460ff16156117495760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610cc0565b565b6040516001600160a01b03808516602483015283166044820152606481018290526117b69085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611a5d565b50505050565b6117c682826112ba565b610cd35760008281526065602090815260408083206001600160a01b03851684529091529020805460ff191660011790556117fe3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b61184c82826112ba565b15610cd35760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600054610100900460ff166117495760405162461bcd60e51b8152600401610cc090612327565b600054610100900460ff166118f75760405162461bcd60e51b8152600401610cc090612327565b6097805460ff19169055565b600082815260656020526040808220600101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b6040516001600160a01b038316602482015260448101829052610c4f90849063a9059cbb60e01b9060640161177f565b611986611703565b6097805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586116e63390565b6119c582826112ba565b610cd3576119d281611b2f565b6119dd836020611b41565b6040516020016119ee929190612396565b60408051601f198184030181529082905262461bcd60e51b8252610cc09160040161240b565b60975460ff166117495760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610cc0565b6000611ab2826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611ce49092919063ffffffff16565b805190915015610c4f5780806020019051810190611ad0919061243e565b610c4f5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610cc0565b606061067c6001600160a01b03831660145b60606000611b50836002612460565b611b5b906002612314565b67ffffffffffffffff811115611b7357611b73612477565b6040519080825280601f01601f191660200182016040528015611b9d576020820181803683370190505b509050600360fc1b81600081518110611bb857611bb86122b8565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611be757611be76122b8565b60200101906001600160f81b031916908160001a9053506000611c0b846002612460565b611c16906001612314565b90505b6001811115611c8e576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611c4a57611c4a6122b8565b1a60f81b828281518110611c6057611c606122b8565b60200101906001600160f81b031916908160001a90535060049490941c93611c878161248d565b9050611c19565b508315611cdd5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610cc0565b9392505050565b6060611cf38484600085611cfb565b949350505050565b606082471015611d5c5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610cc0565b6001600160a01b0385163b611db35760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610cc0565b600080866001600160a01b03168587604051611dcf91906124a4565b60006040518083038185875af1925050503d8060008114611e0c576040519150601f19603f3d011682016040523d82523d6000602084013e611e11565b606091505b5091509150611e21828286611e2c565b979650505050505050565b60608315611e3b575081611cdd565b825115611e4b5782518084602001fd5b8160405162461bcd60e51b8152600401610cc0919061240b565b600060208284031215611e7757600080fd5b81356001600160e01b031981168114611cdd57600080fd5b80356001600160801b0381168114611ea657600080fd5b919050565b600060208284031215611ebd57600080fd5b611cdd82611e8f565b600060c08284031215611ed857600080fd5b50919050565b600060208284031215611ef057600080fd5b5035919050565b60008060408385031215611f0a57600080fd5b611f1383611e8f565b9150611f2160208401611e8f565b90509250929050565b6020808252825182820181905260009190848201906040850190845b81811015611f6b5783516001600160801b031683529284019291840191600101611f46565b50909695505050505050565b80356001600160a01b0381168114611ea657600080fd5b60008060408385031215611fa157600080fd5b82359150611f2160208401611f77565b60008060408385031215611fc457600080fd5b611fcd83611e8f565b9150611f2160208401611f77565b60008060408385031215611fee57600080fd5b611ff783611f77565b946020939093013593505050565b60008060006060848603121561201a57600080fd5b8335925061202a60208501611e8f565b915061203860408501611f77565b90509250925092565b60006020828403121561205357600080fd5b611cdd82611f77565b6020808252825182820181905260009190848201906040850190845b81811015611f6b57835183529284019291840191600101612078565b825181526020808401516101c08301916120b8908401826001600160801b03169052565b5060408401516120d360408401826001600160801b03169052565b5060608401516120ee60608401826001600160801b03169052565b50608084015161210960808401826001600160801b03169052565b5060a084015161212460a08401826001600160801b03169052565b5060c084015161213f60c08401826001600160801b03169052565b5060e084015161215a60e08401826001600160801b03169052565b50610100848101516001600160a01b039081169184019190915261012080860151821690840152610140808601519091169083015282516001600160801b031661016083015260208301511515610180830152604083015115156101a0830152611cdd565b634e487b7160e01b600052600160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016121fd576121fd6121d5565b5060010190565b634e487b7160e01b600052601260045260246000fd5b60006001600160801b038084168061223457612234612204565b92169190910492915050565b60006001600160801b038084168061225a5761225a612204565b92169190910692915050565b6001600160801b03818116838216028082169190828114612289576122896121d5565b505092915050565b6001600160801b038181168382160190808211156122b1576122b16121d5565b5092915050565b634e487b7160e01b600052603260045260246000fd5b60006001600160801b038083168181036122ea576122ea6121d5565b6001019392505050565b6001600160801b038281168282160390808211156122b1576122b16121d5565b8082018082111561067c5761067c6121d5565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60005b8381101561238d578181015183820152602001612375565b50506000910152565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516123ce816017850160208801612372565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516123ff816028840160208801612372565b01602801949350505050565b602081526000825180602084015261242a816040850160208701612372565b601f01601f19169190910160400192915050565b60006020828403121561245057600080fd5b81518015158114611cdd57600080fd5b808202811582820484141761067c5761067c6121d5565b634e487b7160e01b600052604160045260246000fd5b60008161249c5761249c6121d5565b506000190190565b600082516124b6818460208701612372565b919091019291505056fe71840dc4906352362b0cdaf79870196c8e42acafade72d5d5a6d59291253ceb1a26469706673582212200b0b18e4b93b4ede2ac548e1a4ce94103b474b29c2f9729993e1440a17efd89264736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101cf5760003560e01c80634c27984e11610104578063a0cc8d2c116100a2578063bd14de9611610071578063bd14de961461042d578063d547741f14610533578063de64039014610546578063e86295141461055957600080fd5b8063a0cc8d2c146103e9578063a217fddf146103f2578063a63197d2146103fa578063adb9cae61461040d57600080fd5b806363f749f5116100de57806363f749f5146103525780638aa6ded5146103bb57806391d14854146103ce57806392d5b544146103e157600080fd5b80634c27984e146103215780635c975abb1461033457806362e414a41461033f57600080fd5b806329a6886e116101715780633a67c2f81161014b5780633a67c2f8146102e85780633bc52866146102fb578063419ffe2c1461030e578063429fba4a1461025d57600080fd5b806329a6886e146102a25780632f2ff15d146102c257806336568abe146102d557600080fd5b80631be25067116101ad5780631be2506714610219578063248a9ca31461022c578063291420b31461025d578063292f2e0e1461027057600080fd5b806301ffc9a7146101d45780630bd30c12146101fc5780631333f2b714610206575b600080fd5b6101e76101e2366004611e65565b61064b565b60405190151581526020015b60405180910390f35b610204610682565b005b610204610214366004611eab565b6106a5565b610204610227366004611ec6565b6106dd565b61024f61023a366004611ede565b60009081526065602052604090206001015490565b6040519081526020016101f3565b61020461026b366004611eab565b610ac8565b60c95461028a90600160801b90046001600160801b031681565b6040516001600160801b0390911681526020016101f3565b6102b56102b0366004611ef7565b610b03565b6040516101f39190611f2a565b6102046102d0366004611f8e565b610c2a565b6102046102e3366004611f8e565b610c54565b6102046102f6366004611fb1565b610cd7565b610204610309366004611ede565b610e79565b60c95461028a906001600160801b031681565b61024f61032f366004611fdb565b61120e565b60975460ff166101e7565b61020461034d366004612005565b61123f565b610394610360366004611ede565b600090815260ce60205260409020600801546001600160801b0381169160ff600160801b8304811692600160881b90041690565b604080516001600160801b03909416845291151560208401521515908201526060016101f3565b60ca5461028a906001600160801b031681565b6101e76103dc366004611f8e565b6112ba565b6102046112e5565b61024f60cc5481565b61024f600081565b610204610408366004611ede565b611305565b61042061041b366004612041565b6114d2565b6040516101f3919061205c565b61052561043b366004611ede565b60ce602090815260009182526040918290208251610160810184528154815260018201546001600160801b0380821683860152600160801b9182900481168387015260028401548082166060808601919091529083900482166080850152600385015480831660a0860152839004821660c08501526004850154821660e085015260058501546001600160a01b039081166101008601526006860154811661012086015260078601541661014085015286519081018752600890940154908116845260ff9181048216151594840194909452600160881b9093049092161515928101929092529082565b6040516101f3929190612094565b610204610541366004611f8e565b61153e565b610204610554366004611ede565b611563565b6105dd610567366004611ede565b600090815260ce602052604090206001810154600282015460038301546004840154600585015460068601546007909601546001600160801b0380871698600160801b978890048216988288169897889004831697838816970483169592909216936001600160a01b0390811693928116921690565b604080516001600160801b039b8c168152998b1660208b0152978a16978901979097529488166060880152928716608087015290861660a086015290941660c08401526001600160a01b0393841660e0840152831661010083015291909116610120820152610140016101f3565b60006001600160e01b03198216637965db0b60e01b148061067c57506301ffc9a760e01b6001600160e01b03198316145b92915050565b6000805160206124c183398151915261069a816116a7565b6106a26116b1565b50565b6000805160206124c18339815191526106bd816116a7565b5060c980546001600160801b03928316600160801b029216919091179055565b6106e5611703565b60cc54600090815260ce602052604090205415610704576107046121bf565b600061071660c0830160a08401612041565b6001600160a01b03160361073d576040516305bf1d9d60e21b815260040160405180910390fd5b3361074e60c0830160a08401612041565b6001600160a01b031603610775576040516346a4b5e960e01b815260040160405180910390fd5b600061078760a0830160808401612041565b6001600160a01b0316036107ae57604051639b84273b60e01b815260040160405180910390fd5b426107bf6040830160208401611eab565b6001600160801b0316116107e657604051630dcde81360e11b815260040160405180910390fd5b6108196107f960a0830160808401612041565b333061080b6080860160608701611eab565b6001600160801b031661174b565b60408051610160810190915260cc54815260208082019061083c90840184611eab565b6001600160801b0316815260200160006001600160801b0316815260200182602001602081019061086d9190611eab565b6001600160801b0316815260200161088b6060840160408501611eab565b6001600160801b031681526020016108a96080840160608501611eab565b6001600160801b03908116825260ca548116602083015260c9541660408201526060016108dc60a0840160808501612041565b6001600160a01b031681526020016108fa60c0840160a08501612041565b6001600160a01b03908116825233602092830181905260cc8054600090815260ce855260408082208751815587870151888301516001600160801b03918216600160801b91831682021760018085019190915560608b015160808c0151908416908416830217600285015560a0808c015160c0808e015191861691861690940217600386015560e08c01516004860180546001600160801b03191691909516179093556101008b01516005850180546001600160a01b0319908116928c169290921790556101208c01516006860180548316918c16919091179055610140909b015160079094018054909b16939098169290921790985593825260cd8087529082209254835495860184559282529481209093015591929091610a2291908501908501612041565b6001600160a01b03168152602080820192909252604001600090812060cc80548254600181018455928452939092200191909155547fe037ec30313eecdd927ffae3beed86a87b82f7bb794966ec08d75cf1a6e8268690610a8960c0840160a08501612041565b604080519283526001600160a01b039091166020830152339082015260600160405180910390a160cc8054906000610ac0836121eb565b919050555050565b6000805160206124c1833981519152610ae0816116a7565b5060ca80546001600160801b0319166001600160801b0392909216919091179055565b60cc54600090815260ce60205260408120606091610b21848661221a565b90506000610b2f8587612240565b6001600160801b03161515905060005b826001600160801b0316816001600160801b03161015610bd257610b638187612266565b610b6e906001612291565b6001850154610b8d9190600160801b90046001600160801b0316612291565b85826001600160801b031681518110610ba857610ba86122b8565b6001600160801b039092166020928302919091019091015280610bca816122ce565b915050610b3f565b508015610c2157600283015484516001600160801b03918216918691908516908110610c0057610c006122b8565b60200260200101906001600160801b031690816001600160801b0316815250505b50505092915050565b600082815260656020526040902060010154610c45816116a7565b610c4f83836117bc565b505050565b6001600160a01b0381163314610cc95760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b610cd38282611842565b5050565b600054610100900460ff1615808015610cf75750600054600160ff909116105b80610d115750303b158015610d11575060005460ff166001145b610d745760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610cc0565b6000805460ff191660011790558015610d97576000805461ff0019166101001790555b610d9f6118a9565b610da76118d0565b60c980546001600160801b03808616600160801b0291161790556001600160a01b038216610dd3573391505b610dde6000836117bc565b610df66000805160206124c1833981519152836117bc565b610e2e7ffc8737ab85eb45125971625a9ebdb75cc78e01d5c1fa80c4c6e5203f47bc4fab6000805160206124c1833981519152611903565b8015610c4f576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a1505050565b610e81611703565b600081815260ce602052604090206008810154600160801b900460ff16610ebb57604051630804c32d60e31b815260040160405180910390fd5b600082815260ce6020526040902060078101546001600160a01b03163314801590610f0d5750610f0b7ffc8737ab85eb45125971625a9ebdb75cc78e01d5c1fa80c4c6e5203f47bc4fab336112ba565b155b8015610f2e5750610f2c6000805160206124c1833981519152336112ba565b155b15610f4c576040516303135bad60e61b815260040160405180910390fd5b600083815260ce6020526040812060018101546002820154919291610f84916001600160801b03600160801b909104811691166122f4565b6002830154909150600090610fa990600160801b90046001600160801b03168361221a565b60028401549091506000908190610fd090600160801b90046001600160801b031685612240565b6001600160801b03161515905060005b836001600160801b0316816001600160801b031610156110ab576000611007826001612291565b60028801546110269190600160801b90046001600160801b0316612266565b60018801546110459190600160801b90046001600160801b0316612291565b9050806001600160801b031642106110925760c95461107490600160801b90046001600160801b031682612291565b6001600160801b0316421161108d5760019350506110ab565b611098565b506110ab565b50806110a3816122ce565b915050610fe0565b508161110b57801561110b5760028501546001600160801b03164210801590611101575060c95460028601546110f4916001600160801b03600160801b90910481169116612291565b6001600160801b03164211155b1561110b57600191505b81611129576040516381c4a38760e01b815260040160405180910390fd5b60ca54600386015460009160649161114d916001600160801b039081169116612266565b611157919061221a565b60038701549091506111739082906001600160801b03166122f4565b6001600160801b031660cb600082825461118d9190612314565b9091555050600586015460068701546111bc916001600160a01b0390811691166001600160801b03841661194e565b6003860154604080518b81526001600160801b0390921660208301527f101b32dc248c08277c4e9a662cd218570f12dccd5a0166380a12991934175f15910160405180910390a1505050505050505050565b60cd602052816000526040600020818154811061122a57600080fd5b90600052602060002001600091509150505481565b6000805160206124c1833981519152611257816116a7565b60cb54836001600160801b0316111561128357604051630c7c9a7f60e11b815260040160405180910390fd5b600084815260ce6020526040902060058101546112b3906001600160a01b0316846001600160801b03871661194e565b5050505050565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6000805160206124c18339815191526112fd816116a7565b6106a261197e565b61130d611703565b600081815260ce602052604090206008810154600160801b900460ff1661134757604051630804c32d60e31b815260040160405180910390fd5b600082815260ce6020526040902060078101546001600160a01b0316331480159061139957506113977ffc8737ab85eb45125971625a9ebdb75cc78e01d5c1fa80c4c6e5203f47bc4fab336112ba565b155b80156113ba57506113b86000805160206124c1833981519152336112ba565b155b156113d8576040516303135bad60e61b815260040160405180910390fd5b600083815260ce6020526040902060088101546001600160801b031615611412576040516351f16c9360e11b815260040160405180910390fd5b60038101546008820180546001600160801b039283169260009161143891859116612291565b82546101009290920a6001600160801b0381810219909316918316021790915560058301546007840154600385015461148594506001600160a01b0392831693929091169130911661174b565b6003810154604080518681526001600160801b0390921660208301527fd91647d68fadbc904f923d642788552eca006a63f0a8e08d123f6c901d963051910160405180910390a150505050565b6001600160a01b038116600090815260cd602090815260409182902080548351818402810184019094528084526060939283018282801561153257602002820191906000526020600020905b81548152602001906001019080831161151e575b50505050509050919050565b600082815260656020526040902060010154611559816116a7565b610c4f8383611842565b600081815260ce602052604090206008810154600160881b900460ff168061159657506008810154600160801b900460ff165b156115b457604051638549e3e360e01b815260040160405180910390fd5b600082815260ce6020526040902060068101546001600160a01b031633146115ef576040516303135bad60e61b815260040160405180910390fd5b60018101546001600160801b031642111561161d576040516327d8e54760e01b815260040160405180910390fd5b600181810180546001600160801b03908116600160801b4290921682021790915560088301805460ff60801b1916909117905533600090815260cd6020908152604080832060cc5481549586018255908452928290209093019190915590518481527fea49e8aa1bbaa9a7b16632ed4aba908b3c702861a23436c8356e296c228cc2789101610e6c565b6106a281336119bb565b6116b9611a14565b6097805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b60975460ff16156117495760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610cc0565b565b6040516001600160a01b03808516602483015283166044820152606481018290526117b69085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611a5d565b50505050565b6117c682826112ba565b610cd35760008281526065602090815260408083206001600160a01b03851684529091529020805460ff191660011790556117fe3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b61184c82826112ba565b15610cd35760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600054610100900460ff166117495760405162461bcd60e51b8152600401610cc090612327565b600054610100900460ff166118f75760405162461bcd60e51b8152600401610cc090612327565b6097805460ff19169055565b600082815260656020526040808220600101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b6040516001600160a01b038316602482015260448101829052610c4f90849063a9059cbb60e01b9060640161177f565b611986611703565b6097805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586116e63390565b6119c582826112ba565b610cd3576119d281611b2f565b6119dd836020611b41565b6040516020016119ee929190612396565b60408051601f198184030181529082905262461bcd60e51b8252610cc09160040161240b565b60975460ff166117495760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610cc0565b6000611ab2826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611ce49092919063ffffffff16565b805190915015610c4f5780806020019051810190611ad0919061243e565b610c4f5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610cc0565b606061067c6001600160a01b03831660145b60606000611b50836002612460565b611b5b906002612314565b67ffffffffffffffff811115611b7357611b73612477565b6040519080825280601f01601f191660200182016040528015611b9d576020820181803683370190505b509050600360fc1b81600081518110611bb857611bb86122b8565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611be757611be76122b8565b60200101906001600160f81b031916908160001a9053506000611c0b846002612460565b611c16906001612314565b90505b6001811115611c8e576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611c4a57611c4a6122b8565b1a60f81b828281518110611c6057611c606122b8565b60200101906001600160f81b031916908160001a90535060049490941c93611c878161248d565b9050611c19565b508315611cdd5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610cc0565b9392505050565b6060611cf38484600085611cfb565b949350505050565b606082471015611d5c5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610cc0565b6001600160a01b0385163b611db35760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610cc0565b600080866001600160a01b03168587604051611dcf91906124a4565b60006040518083038185875af1925050503d8060008114611e0c576040519150601f19603f3d011682016040523d82523d6000602084013e611e11565b606091505b5091509150611e21828286611e2c565b979650505050505050565b60608315611e3b575081611cdd565b825115611e4b5782518084602001fd5b8160405162461bcd60e51b8152600401610cc0919061240b565b600060208284031215611e7757600080fd5b81356001600160e01b031981168114611cdd57600080fd5b80356001600160801b0381168114611ea657600080fd5b919050565b600060208284031215611ebd57600080fd5b611cdd82611e8f565b600060c08284031215611ed857600080fd5b50919050565b600060208284031215611ef057600080fd5b5035919050565b60008060408385031215611f0a57600080fd5b611f1383611e8f565b9150611f2160208401611e8f565b90509250929050565b6020808252825182820181905260009190848201906040850190845b81811015611f6b5783516001600160801b031683529284019291840191600101611f46565b50909695505050505050565b80356001600160a01b0381168114611ea657600080fd5b60008060408385031215611fa157600080fd5b82359150611f2160208401611f77565b60008060408385031215611fc457600080fd5b611fcd83611e8f565b9150611f2160208401611f77565b60008060408385031215611fee57600080fd5b611ff783611f77565b946020939093013593505050565b60008060006060848603121561201a57600080fd5b8335925061202a60208501611e8f565b915061203860408501611f77565b90509250925092565b60006020828403121561205357600080fd5b611cdd82611f77565b6020808252825182820181905260009190848201906040850190845b81811015611f6b57835183529284019291840191600101612078565b825181526020808401516101c08301916120b8908401826001600160801b03169052565b5060408401516120d360408401826001600160801b03169052565b5060608401516120ee60608401826001600160801b03169052565b50608084015161210960808401826001600160801b03169052565b5060a084015161212460a08401826001600160801b03169052565b5060c084015161213f60c08401826001600160801b03169052565b5060e084015161215a60e08401826001600160801b03169052565b50610100848101516001600160a01b039081169184019190915261012080860151821690840152610140808601519091169083015282516001600160801b031661016083015260208301511515610180830152604083015115156101a0830152611cdd565b634e487b7160e01b600052600160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016121fd576121fd6121d5565b5060010190565b634e487b7160e01b600052601260045260246000fd5b60006001600160801b038084168061223457612234612204565b92169190910492915050565b60006001600160801b038084168061225a5761225a612204565b92169190910692915050565b6001600160801b03818116838216028082169190828114612289576122896121d5565b505092915050565b6001600160801b038181168382160190808211156122b1576122b16121d5565b5092915050565b634e487b7160e01b600052603260045260246000fd5b60006001600160801b038083168181036122ea576122ea6121d5565b6001019392505050565b6001600160801b038281168282160390808211156122b1576122b16121d5565b8082018082111561067c5761067c6121d5565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60005b8381101561238d578181015183820152602001612375565b50506000910152565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516123ce816017850160208801612372565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516123ff816028840160208801612372565b01602801949350505050565b602081526000825180602084015261242a816040850160208701612372565b601f01601f19169190910160400192915050565b60006020828403121561245057600080fd5b81518015158114611cdd57600080fd5b808202811582820484141761067c5761067c6121d5565b634e487b7160e01b600052604160045260246000fd5b60008161249c5761249c6121d5565b506000190190565b600082516124b6818460208701612372565b919091019291505056fe71840dc4906352362b0cdaf79870196c8e42acafade72d5d5a6d59291253ceb1a26469706673582212200b0b18e4b93b4ede2ac548e1a4ce94103b474b29c2f9729993e1440a17efd89264736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "activateAgreement(uint256)": {
        "details": "The agreement needs to be created, inactive and the funds for the first cycle set",
        "params": {
          "agreementID": "The ID of the agreement to activate"
        }
      },
      "calculateMigrationPeriods(uint128,uint128)": {
        "details": "If there is a remainder, the last migration period will be shorter than the others and fall on the maturity datethe return value is a list of the starting migration periods. To actualy calculate the period you need to add the challenge duration",
        "params": {
          "agreementDuration": "The duration of the agreement",
          "paymentCycleDuration": "The duration of the payment cycle"
        },
        "returns": {
          "migrationPeriods": "The migration periods for the agreement"
        }
      },
      "claimProtocolFees(uint256,uint128,address)": {
        "params": {
          "agreementID": "The identifier of the agreement",
          "amount": "The amount of tokens claimed",
          "to": "The address receiving the fees*"
        }
      },
      "createAgreement((uint128,uint128,uint128,uint128,address,address))": {
        "details": "The agreement default state is inactive, it needs to be activated by the contractor",
        "params": {
          "params": "The parameters of the agreement"
        }
      },
      "getAgreementParameters(uint256)": {
        "details": "an agreement can be not active because it has not been activated or because it is closed",
        "params": {
          "agreementID": "The ID of the agreement"
        },
        "returns": {
          "acceptanceDeadline": "The timestamp the contractor can no longer accept the agreement",
          "activationDate": "The timestamp when the agreement was activated",
          "contractee": "The address of the contractee",
          "contractor": "The address of the contractor",
          "establishmentFeeRate_": "The rate of the establishment fee",
          "maturityDate": "The date when the agreement expires",
          "paymentCycleAmount": "The amount of tokens to be released per payment cycle",
          "paymentCycleDuration": "The duration of a payment cycle",
          "penalizationAmount_": "The amount of tokens that will be kept in case of a penalization",
          "underlayingToken": "The address of the token used for the agreement"
        }
      },
      "getAgreementState(uint256)": {
        "params": {
          "active": "Whether the agreement is active",
          "agreementID": "The ID of the agreement",
          "closed": "Whether the agreement is closed",
          "escrowedFunds": "The amount of funds escrowed in the agreement"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getUserAgreements(address)": {
        "params": {
          "user": "The address of the user"
        },
        "returns": {
          "_0": "agreementIDs The IDs of the agreements"
        }
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "migrateFunds(uint256)": {
        "details": "Only the keeper or contractee can call this functionA for loop is used to calculate the migration periods instead of storing them on chain to reduce gas costsTo reduce gas costs, the migration periods are calculated inside the function, instead of calling calculateMigrationPeriodsIf there is a remainder, the last migration period will be shorter than the others and fall on the maturity date",
        "params": {
          "agreementID": "The ID of the agreement to release the funds for"
        }
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "setChallengeDuration(uint128)": {
        "params": {
          "challengeDuration_": "The new challenge duration"
        }
      },
      "setEstablishmentFeeRate(uint128)": {
        "params": {
          "establishmentFeeRate_": "The new establishment fee rate"
        }
      },
      "setPenalizationAmount(uint128)": {
        "params": {
          "penalizationAmount_": "The new penalization amount"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "AgreementActivated(uint256)": {
        "notice": "Emitted after a agreement was activated"
      },
      "AgreementCreated(uint256,address,address)": {
        "notice": "Emitted after a event was creted"
      },
      "FundsDeposited(uint256,uint128)": {
        "notice": "Emitted after funds are deposited for the upcoming cycle "
      },
      "FundsMigrated(uint256,uint128)": {
        "notice": "Emitted after funds were migrated"
      }
    },
    "kind": "user",
    "methods": {
      "activateAgreement(uint256)": {
        "notice": "Activates an agreement"
      },
      "calculateMigrationPeriods(uint128,uint128)": {
        "notice": "Calculates the migration periods for an agreement"
      },
      "claimProtocolFees(uint256,uint128,address)": {
        "notice": "Withdraws protocol fees to a target address"
      },
      "createAgreement((uint128,uint128,uint128,uint128,address,address))": {
        "notice": "Creates a new agreement"
      },
      "freezeAgreements()": {
        "notice": "Stops all actions on all agreements*"
      },
      "getAgreementParameters(uint256)": {
        "notice": "Returns the parameters of an agreement"
      },
      "getAgreementState(uint256)": {
        "notice": "Returns the state of an agreement"
      },
      "getUserAgreements(address)": {
        "notice": "Returns the user agreements"
      },
      "migrateFunds(uint256)": {
        "notice": "Releases the funds for the current payment cycle"
      },
      "setChallengeDuration(uint128)": {
        "notice": "Sets the challenge duration for all agreements"
      },
      "setEstablishmentFeeRate(uint128)": {
        "notice": "Set the establishment protocol fee rate"
      },
      "setPenalizationAmount(uint128)": {
        "notice": "Set the penalization amount for the protocol"
      },
      "unfreezeAgreements()": {
        "notice": "Cancel a freeze, makes actions available again on all agreements*"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 415,
        "contract": "src/Manager.sol:Manager",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 418,
        "contract": "src/Manager.sol:Manager",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1029,
        "contract": "src/Manager.sol:Manager",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1248,
        "contract": "src/Manager.sol:Manager",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 39,
        "contract": "src/Manager.sol:Manager",
        "label": "_roles",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)"
      },
      {
        "astId": 334,
        "contract": "src/Manager.sol:Manager",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 598,
        "contract": "src/Manager.sol:Manager",
        "label": "_paused",
        "offset": 0,
        "slot": "151",
        "type": "t_bool"
      },
      {
        "astId": 703,
        "contract": "src/Manager.sol:Manager",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 2833,
        "contract": "src/Manager.sol:Manager",
        "label": "penalizationAmount",
        "offset": 0,
        "slot": "201",
        "type": "t_uint128"
      },
      {
        "astId": 2835,
        "contract": "src/Manager.sol:Manager",
        "label": "challengeDuration",
        "offset": 16,
        "slot": "201",
        "type": "t_uint128"
      },
      {
        "astId": 2837,
        "contract": "src/Manager.sol:Manager",
        "label": "establishmentFeeRate",
        "offset": 0,
        "slot": "202",
        "type": "t_uint128"
      },
      {
        "astId": 2840,
        "contract": "src/Manager.sol:Manager",
        "label": "accruedEstablishmentFee",
        "offset": 0,
        "slot": "203",
        "type": "t_uint256"
      },
      {
        "astId": 2843,
        "contract": "src/Manager.sol:Manager",
        "label": "agreementNonce",
        "offset": 0,
        "slot": "204",
        "type": "t_uint256"
      },
      {
        "astId": 2848,
        "contract": "src/Manager.sol:Manager",
        "label": "userAgreements",
        "offset": 0,
        "slot": "205",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 2853,
        "contract": "src/Manager.sol:Manager",
        "label": "agreements",
        "offset": 0,
        "slot": "206",
        "type": "t_mapping(t_uint256,t_struct(Agreement)3960_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)34_storage"
      },
      "t_mapping(t_uint256,t_struct(Agreement)3960_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Types.Agreement)",
        "numberOfBytes": "32",
        "value": "t_struct(Agreement)3960_storage"
      },
      "t_struct(Agreement)3960_storage": {
        "encoding": "inplace",
        "label": "struct Types.Agreement",
        "members": [
          {
            "astId": 3956,
            "contract": "src/Manager.sol:Manager",
            "label": "parameters",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(AgreementParameters)3946_storage"
          },
          {
            "astId": 3959,
            "contract": "src/Manager.sol:Manager",
            "label": "state",
            "offset": 0,
            "slot": "8",
            "type": "t_struct(AgreementState)3953_storage"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_struct(AgreementParameters)3946_storage": {
        "encoding": "inplace",
        "label": "struct Types.AgreementParameters",
        "members": [
          {
            "astId": 3925,
            "contract": "src/Manager.sol:Manager",
            "label": "AGREEMENT_ID",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3927,
            "contract": "src/Manager.sol:Manager",
            "label": "ACCEPTANCE_DEADLINE",
            "offset": 0,
            "slot": "1",
            "type": "t_uint128"
          },
          {
            "astId": 3929,
            "contract": "src/Manager.sol:Manager",
            "label": "ACTIVATION_DATE",
            "offset": 16,
            "slot": "1",
            "type": "t_uint128"
          },
          {
            "astId": 3931,
            "contract": "src/Manager.sol:Manager",
            "label": "MATURITY_DATE",
            "offset": 0,
            "slot": "2",
            "type": "t_uint128"
          },
          {
            "astId": 3933,
            "contract": "src/Manager.sol:Manager",
            "label": "PAYMENT_CYCLE_DURATION",
            "offset": 16,
            "slot": "2",
            "type": "t_uint128"
          },
          {
            "astId": 3935,
            "contract": "src/Manager.sol:Manager",
            "label": "PAYMENT_CYCLE_AMOUNT",
            "offset": 0,
            "slot": "3",
            "type": "t_uint128"
          },
          {
            "astId": 3937,
            "contract": "src/Manager.sol:Manager",
            "label": "ESTABLISHMENT_FEE_RATE",
            "offset": 16,
            "slot": "3",
            "type": "t_uint128"
          },
          {
            "astId": 3939,
            "contract": "src/Manager.sol:Manager",
            "label": "PENALIZATION_AMOUNT",
            "offset": 0,
            "slot": "4",
            "type": "t_uint128"
          },
          {
            "astId": 3941,
            "contract": "src/Manager.sol:Manager",
            "label": "UNDERLAYING_TOKEN",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 3943,
            "contract": "src/Manager.sol:Manager",
            "label": "CONTRACTOR",
            "offset": 0,
            "slot": "6",
            "type": "t_address"
          },
          {
            "astId": 3945,
            "contract": "src/Manager.sol:Manager",
            "label": "CONTRACTEE",
            "offset": 0,
            "slot": "7",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(AgreementState)3953_storage": {
        "encoding": "inplace",
        "label": "struct Types.AgreementState",
        "members": [
          {
            "astId": 3948,
            "contract": "src/Manager.sol:Manager",
            "label": "escrowedFunds",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 3950,
            "contract": "src/Manager.sol:Manager",
            "label": "active",
            "offset": 16,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 3952,
            "contract": "src/Manager.sol:Manager",
            "label": "closed",
            "offset": 17,
            "slot": "0",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)34_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 31,
            "contract": "src/Manager.sol:Manager",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 33,
            "contract": "src/Manager.sol:Manager",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}