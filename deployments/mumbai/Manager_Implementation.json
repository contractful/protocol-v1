{
  "address": "0xbf33Cf785a4517b556705626705c04611364C98E",
  "abi": [
    {
      "inputs": [],
      "name": "MG_ADDRESS_ZERO",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MG_AGREEMENT_NOT_PENDING",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MG_AMOUNT_TOO_HIGH",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MG_CONTRACTOR_EQUALS_CONTRACTEE",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MG_FUNDS_ALREADY_SECURED",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MG_INVALID_MATURITY_DATE",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MG_INVALID_MIGRATION_PERIOD",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MG_INVALID_PERCENTAGES",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MG_INVALID_TOKEN",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MG_NOT_ONGOING",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MG_PAST_BEGINNING_DATE",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MG_UNAUTHORIZED",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "agreementID",
          "type": "uint256"
        }
      ],
      "name": "AgreementActivated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "agreementID",
          "type": "uint256"
        }
      ],
      "name": "AgreementCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "agreementID",
          "type": "uint256"
        }
      ],
      "name": "AgreementChallenged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "agreementID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "contractor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "contractee",
          "type": "address"
        }
      ],
      "name": "AgreementCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "agreement",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "amount",
          "type": "uint128"
        }
      ],
      "name": "FundsDeposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "agreement",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "amount",
          "type": "uint128"
        }
      ],
      "name": "FundsMigrated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "agreementID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "contractorAmount",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "contracteeAmount",
          "type": "uint128"
        }
      ],
      "name": "FundsSplitted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DOMAIN_SEPARATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "agreementID",
          "type": "uint256"
        }
      ],
      "name": "activateAgreement",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "agreementNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "agreements",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "AGREEMENT_ID",
              "type": "uint256"
            },
            {
              "internalType": "uint128",
              "name": "BEGINNING_DATE",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "MATURITY_DATE",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "PAYMENT_CYCLE_DURATION",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "PAYMENT_CYCLE_AMOUNT",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "ESTABLISHMENT_FEE_RATE",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "PENALIZATION_AMOUNT",
              "type": "uint128"
            },
            {
              "internalType": "address",
              "name": "UNDERLAYING_TOKEN",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "CONTRACTOR",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "CONTRACTEE",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "DESCRIPTION_URI",
              "type": "string"
            }
          ],
          "internalType": "struct Types.AgreementParameters",
          "name": "parameters",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint128",
              "name": "escrowedFunds",
              "type": "uint128"
            },
            {
              "internalType": "bool",
              "name": "closed",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "challenged",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "active",
              "type": "bool"
            }
          ],
          "internalType": "struct Types.AgreementState",
          "name": "state",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "agreementID",
          "type": "uint256"
        }
      ],
      "name": "cancelAgreement",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "agreementID",
          "type": "uint256"
        }
      ],
      "name": "challengeAgreement",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "challengeDuration",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "agreementID",
          "type": "uint256"
        },
        {
          "internalType": "uint128",
          "name": "amount",
          "type": "uint128"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "claimProtocolFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint128",
              "name": "beginningDate",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "maturityDate",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "paymentCycleDuration",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "paymentCycleAmount",
              "type": "uint128"
            },
            {
              "internalType": "address",
              "name": "underlayingToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "contractor",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "descriptionURI",
              "type": "string"
            }
          ],
          "internalType": "struct IManager.AgreementCreationParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "createAgreement",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "agreementID",
          "type": "uint256"
        }
      ],
      "name": "depositFundsForNextCycle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "establishmentFeeRate",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "freezeAgreements",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "agreementID",
          "type": "uint256"
        }
      ],
      "name": "getAgreementParameters",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "beginningDate",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "maturityDate",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "paymentCycleDuration",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "paymentCycleAmount",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "establishmentFeeRate_",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "penalizationAmount_",
          "type": "uint128"
        },
        {
          "internalType": "address",
          "name": "underlayingToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "contractor",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "contractee",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "descriptionURI",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "agreementID",
          "type": "uint256"
        }
      ],
      "name": "getAgreementState",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "escrowedFunds",
          "type": "uint128"
        },
        {
          "internalType": "bool",
          "name": "closed",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "challenged",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserAgreements",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "challengeDuration_",
          "type": "uint128"
        },
        {
          "internalType": "address",
          "name": "governance_",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize_",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "agreementID",
          "type": "uint256"
        }
      ],
      "name": "migrateFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "penalizationAmount",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "challengeDuration_",
          "type": "uint128"
        }
      ],
      "name": "setChallengeDuration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "establishmentFeeRate_",
          "type": "uint128"
        }
      ],
      "name": "setEstablishmentFeeRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "penalizationAmount_",
          "type": "uint128"
        }
      ],
      "name": "setPenalizationAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "agreementID",
          "type": "uint256"
        },
        {
          "internalType": "uint128",
          "name": "contractorPercentage",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "contracteePercentage",
          "type": "uint128"
        }
      ],
      "name": "splitFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unfreezeAgreements",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "usedNonces",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userAgreements",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "signer",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        }
      ],
      "name": "validateDescription",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x3e6e9a9a7ae8b8dfdf538182485993734f916118573d36735fc51f57bd6679ad",
  "receipt": {
    "to": null,
    "from": "0xfd94B585517d532BC4B80E35bC26383E7834f8b9",
    "contractAddress": "0xbf33Cf785a4517b556705626705c04611364C98E",
    "transactionIndex": 33,
    "gasUsed": "2970275",
    "logsBloom": "0x
    "blockHash": "0x8aac7f8fb177c316d68248d4f25fdf2f28bafa21f7d7822da09db3b189463598",
    "transactionHash": "0x3e6e9a9a7ae8b8dfdf538182485993734f916118573d36735fc51f57bd6679ad",
    "logs": [
      {
        "transactionIndex": 33,
        "blockNumber": 29080439,
        "transactionHash": "0x3e6e9a9a7ae8b8dfdf538182485993734f916118573d36735fc51f57bd6679ad",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000fd94b585517d532bc4b80e35bc26383e7834f8b9",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000fd42c8f63ed000000000000000000000000000000000000000000000000003572820b0aeedf070000000000000000000000000000000000000000000017742821613daf4b1e220000000000000000000000000000000000000000000000003562adde7b8af2070000000000000000000000000000000000000000000017742831356a3eaf0b22",
        "logIndex": 165,
        "blockHash": "0x8aac7f8fb177c316d68248d4f25fdf2f28bafa21f7d7822da09db3b189463598"
      }
    ],
    "blockNumber": 29080439,
    "cumulativeGasUsed": "8044874",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "b03618998267da766ced8a433a67e94d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"MG_ADDRESS_ZERO\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MG_AGREEMENT_NOT_PENDING\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MG_AMOUNT_TOO_HIGH\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MG_CONTRACTOR_EQUALS_CONTRACTEE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MG_FUNDS_ALREADY_SECURED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MG_INVALID_MATURITY_DATE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MG_INVALID_MIGRATION_PERIOD\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MG_INVALID_PERCENTAGES\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MG_INVALID_TOKEN\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MG_NOT_ONGOING\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MG_PAST_BEGINNING_DATE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MG_UNAUTHORIZED\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"agreementID\",\"type\":\"uint256\"}],\"name\":\"AgreementActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"agreementID\",\"type\":\"uint256\"}],\"name\":\"AgreementCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"agreementID\",\"type\":\"uint256\"}],\"name\":\"AgreementChallenged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"agreementID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contractor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contractee\",\"type\":\"address\"}],\"name\":\"AgreementCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"agreement\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"FundsDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"agreement\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"FundsMigrated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"agreementID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"contractorAmount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"contracteeAmount\",\"type\":\"uint128\"}],\"name\":\"FundsSplitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"agreementID\",\"type\":\"uint256\"}],\"name\":\"activateAgreement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"agreementNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"agreements\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"AGREEMENT_ID\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"BEGINNING_DATE\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"MATURITY_DATE\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"PAYMENT_CYCLE_DURATION\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"PAYMENT_CYCLE_AMOUNT\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"ESTABLISHMENT_FEE_RATE\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"PENALIZATION_AMOUNT\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"UNDERLAYING_TOKEN\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"CONTRACTOR\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"CONTRACTEE\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"DESCRIPTION_URI\",\"type\":\"string\"}],\"internalType\":\"struct Types.AgreementParameters\",\"name\":\"parameters\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"escrowedFunds\",\"type\":\"uint128\"},{\"internalType\":\"bool\",\"name\":\"closed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"challenged\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"internalType\":\"struct Types.AgreementState\",\"name\":\"state\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"agreementID\",\"type\":\"uint256\"}],\"name\":\"cancelAgreement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"agreementID\",\"type\":\"uint256\"}],\"name\":\"challengeAgreement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"challengeDuration\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"agreementID\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"claimProtocolFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"beginningDate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"maturityDate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"paymentCycleDuration\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"paymentCycleAmount\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"underlayingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"contractor\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"descriptionURI\",\"type\":\"string\"}],\"internalType\":\"struct IManager.AgreementCreationParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"createAgreement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"agreementID\",\"type\":\"uint256\"}],\"name\":\"depositFundsForNextCycle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"establishmentFeeRate\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"freezeAgreements\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"agreementID\",\"type\":\"uint256\"}],\"name\":\"getAgreementParameters\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"beginningDate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"maturityDate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"paymentCycleDuration\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"paymentCycleAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"establishmentFeeRate_\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"penalizationAmount_\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"underlayingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"contractor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"contractee\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"descriptionURI\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"agreementID\",\"type\":\"uint256\"}],\"name\":\"getAgreementState\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"escrowedFunds\",\"type\":\"uint128\"},{\"internalType\":\"bool\",\"name\":\"closed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"challenged\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserAgreements\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"challengeDuration_\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"governance_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize_\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"agreementID\",\"type\":\"uint256\"}],\"name\":\"migrateFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"penalizationAmount\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"challengeDuration_\",\"type\":\"uint128\"}],\"name\":\"setChallengeDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"establishmentFeeRate_\",\"type\":\"uint128\"}],\"name\":\"setEstablishmentFeeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"penalizationAmount_\",\"type\":\"uint128\"}],\"name\":\"setPenalizationAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"agreementID\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"contractorPercentage\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"contracteePercentage\",\"type\":\"uint128\"}],\"name\":\"splitFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unfreezeAgreements\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"usedNonces\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userAgreements\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"validateDescription\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"activateAgreement(uint256)\":{\"details\":\"The agreement needs to be created, inactive and the funds for the first cycle set\",\"params\":{\"agreementID\":\"The ID of the agreement to activate\"}},\"cancelAgreement(uint256)\":{\"details\":\"only callable by the contractee\",\"params\":{\"agreementID\":\"The ID of the agreement\"}},\"challengeAgreement(uint256)\":{\"params\":{\"agreementID\":\"The ID of the agreement\"}},\"claimProtocolFees(uint256,uint128,address)\":{\"params\":{\"agreementID\":\"The identifier of the agreement\",\"amount\":\"The amount of tokens claimed\",\"to\":\"The address receiving the fees*\"}},\"createAgreement((uint128,uint128,uint128,uint128,address,address,string))\":{\"details\":\"The agreement default state is inactive, it needs to be activated by the contractor\",\"params\":{\"params\":\"The parameters of the agreement\"}},\"getAgreementParameters(uint256)\":{\"details\":\"an agreement can be not active because it has not been activated or because it is closed\",\"params\":{\"agreementID\":\"The ID of the agreement\"},\"returns\":{\"beginningDate\":\"The beginning date of the agreement\",\"contractee\":\"The address of the contractee\",\"contractor\":\"The address of the contractor\",\"descriptionURI\":\"The URI of the agreement description\",\"establishmentFeeRate_\":\"The rate of the establishment fee\",\"maturityDate\":\"The date when the agreement expires\",\"paymentCycleAmount\":\"The amount of tokens to be released per payment cycle\",\"paymentCycleDuration\":\"The duration of a payment cycle\",\"penalizationAmount_\":\"The amount of tokens that will be kept in case of a penalization\",\"underlayingToken\":\"The address of the token used for the agreement\"}},\"getAgreementState(uint256)\":{\"params\":{\"active\":\"Whether the agreement is active\",\"agreementID\":\"The ID of the agreement\",\"challenged\":\"Whether the agreement is challenged\",\"closed\":\"Whether the agreement is closed\",\"escrowedFunds\":\"The amount of funds escrowed in the agreement\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getUserAgreements(address)\":{\"params\":{\"user\":\"The address of the user\"},\"returns\":{\"_0\":\"agreementIDs The IDs of the agreements\"}},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"migrateFunds(uint256)\":{\"details\":\"Only the keeper or contractee can call this functionA for loop is used to calculate the migration periods instead of storing them on chain to reduce gas costsIf there is a remainder, the last migration period will be shorter than the others and fall on the maturity date\",\"params\":{\"agreementID\":\"The ID of the agreement to release the funds for\"}},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"setChallengeDuration(uint128)\":{\"params\":{\"challengeDuration_\":\"The new challenge duration\"}},\"setEstablishmentFeeRate(uint128)\":{\"params\":{\"establishmentFeeRate_\":\"The new establishment fee rate\"}},\"setPenalizationAmount(uint128)\":{\"params\":{\"penalizationAmount_\":\"The new penalization amount\"}},\"splitFunds(uint256,uint128,uint128)\":{\"details\":\"Only integers can be passed as pecentages. The function does't calculate for decimal points\",\"params\":{\"agreementID\":\"The ID of the agreement\",\"contracteePercentage\":\"The percentage of the escrowed funds to be released to the contractee\",\"contractorPercentage\":\"The percentage of the escrowed funds to be released to the contractor\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"events\":{\"AgreementActivated(uint256)\":{\"notice\":\"Emitted after a agreement was activated\"},\"AgreementCancelled(uint256)\":{\"notice\":\"Emitted after a agreement was cancelled\"},\"AgreementChallenged(uint256)\":{\"notice\":\"Emitted after an agreement was challenged\"},\"AgreementCreated(uint256,address,address)\":{\"notice\":\"Emitted after a event was creted\"},\"FundsDeposited(uint256,uint128)\":{\"notice\":\"Emitted after funds are deposited for the upcoming cycle\"},\"FundsMigrated(uint256,uint128)\":{\"notice\":\"Emitted after funds were migrated\"},\"FundsSplitted(uint256,uint128,uint128)\":{\"notice\":\"Emitted after the escrowd funds for an agreement were splitted\"}},\"kind\":\"user\",\"methods\":{\"activateAgreement(uint256)\":{\"notice\":\"Activates an agreement\"},\"cancelAgreement(uint256)\":{\"notice\":\"Closes an agreement and releases the escrowed funds accordingly to the agreement state\"},\"challengeAgreement(uint256)\":{\"notice\":\"Sets the agreement state to challenged and emmits an event that will be captured by the Contractful DAO( currently a multisig)\"},\"claimProtocolFees(uint256,uint128,address)\":{\"notice\":\"Withdraws protocol fees to a target address\"},\"createAgreement((uint128,uint128,uint128,uint128,address,address,string))\":{\"notice\":\"Creates a new agreement\"},\"freezeAgreements()\":{\"notice\":\"Stops all actions on all agreements*\"},\"getAgreementParameters(uint256)\":{\"notice\":\"Returns the parameters of an agreement\"},\"getAgreementState(uint256)\":{\"notice\":\"Returns the state of an agreement\"},\"getUserAgreements(address)\":{\"notice\":\"Returns the user agreements\"},\"migrateFunds(uint256)\":{\"notice\":\"Releases the funds for the current payment cycle\"},\"setChallengeDuration(uint128)\":{\"notice\":\"Sets the challenge duration for all agreements\"},\"setEstablishmentFeeRate(uint128)\":{\"notice\":\"Set the establishment protocol fee rate\"},\"setPenalizationAmount(uint128)\":{\"notice\":\"Set the penalization amount for the protocol\"},\"splitFunds(uint256,uint128,uint128)\":{\"notice\":\"Releases the escrowed funds accordingly to the percentages passed as parametersFor the moment the function is only callable by governance wich is a multisig wallet. However in the future it will only be callable by the Contractful DAO\"},\"unfreezeAgreements()\":{\"notice\":\"Cancel a freeze, makes actions available again on all agreements*\"},\"validateDescription(address,uint8,bytes32,bytes32,string,uint256)\":{\"notice\":\"checks whether the signer signed the description\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/Manager.sol\":\"Manager\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0-rc.1) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xd25b5dd88ee621810335aa7272faeeb2a4c4151b19ce4ac0d7ce75a347bb53b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0-rc.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0xf2efdd01f01f127e8b631675a359cd8cabfbcdcd2e8587ecf906181bcd667bc9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0-rc.1) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xabed77589961adbaaa36817e0914bcbe4c447311c9451bf3fc9b073c1f092d8d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0-rc.1) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0x992b28e9cd85d3614bf2f0ad8225164128abdf44fb533db8587e8a64e0d9883c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0-rc.1) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x382f704a068eb9b9e3c73c7acef54b464043aa12ea0abacfd0b8440c6e1e4e4f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"src/Manager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"./lib/IManager.sol\\\";\\nimport \\\"./lib/Types.sol\\\";\\nimport \\\"./lib/Roles.sol\\\";\\nimport \\\"./lib/Errors.sol\\\";\\nimport \\\"./Validator.sol\\\";\\n\\n/**\\n * @title Manager\\n * @author Contractful Labs\\n * @notice Lets users create and manage contract work agreements\\n */\\n\\npragma solidity ^0.8.0;\\n\\ncontract Manager is IManager, Validator {\\n  // General values. Only modifiable by Roles.GOVERNANCE\\n  uint128 public penalizationAmount;\\n  uint128 public challengeDuration;\\n  uint128 public establishmentFeeRate;\\n  uint256 internal accruedEstablishmentFee = 0;\\n\\n  // These variables will be removed soon once the proxy implementation is updated.\\n  uint256 public agreementNonce = 1;\\n  mapping(address => uint256[]) public userAgreements;\\n\\n  // agreement ID to agreement\\n  mapping(uint256 => Types.Agreement) public agreements;\\n\\n  modifier whenPending(Types.Agreement storage agreement) {\\n    if (agreement.state.closed || agreement.state.active) {\\n      revert Errors.MG_AGREEMENT_NOT_PENDING();\\n    }\\n    _;\\n  }\\n\\n  modifier whenOngoing(Types.Agreement storage agreement) {\\n    if (!agreement.state.active || agreement.state.closed || agreement.state.challenged) {\\n      revert Errors.MG_NOT_ONGOING();\\n    }\\n    _;\\n  }\\n\\n  modifier onlyAuthorized(Types.Agreement storage agreement) {\\n    if (\\n      agreement.parameters.CONTRACTEE != msg.sender &&\\n      !hasRole(Roles.KEEPER_ROLE, msg.sender) &&\\n      !hasRole(Roles.GOVERNANCE_ROLE, msg.sender)\\n    ) {\\n      revert Errors.MG_UNAUTHORIZED();\\n    }\\n    _;\\n  }\\n\\n  function initialize(uint128 challengeDuration_, address governance_) public initializer {\\n    initialize_();\\n    /* Both initializers below are called to comply with OpenZeppelin's\\n    recommendations even if in practice they don't do anything */\\n    __AccessControl_init();\\n    __Pausable_init_unchained();\\n\\n    challengeDuration = challengeDuration_;\\n\\n    if (governance_ == address(0)) {\\n      // Prevent setting governance_ to null account\\n      governance_ = _msgSender();\\n    }\\n\\n    _grantRole(DEFAULT_ADMIN_ROLE, governance_);\\n    _grantRole(Roles.GOVERNANCE_ROLE, governance_);\\n    _setRoleAdmin(Roles.KEEPER_ROLE, Roles.GOVERNANCE_ROLE);\\n  }\\n\\n  /**\\n   * @notice Creates a new agreement\\n   * @param params The parameters of the agreement\\n   * @dev The agreement default state is inactive, it needs to be activated by the contractor\\n   */\\n  function createAgreement(AgreementCreationParams calldata params) external whenNotPaused {\\n    assert(agreements[agreementNonce].parameters.AGREEMENT_ID == 0);\\n\\n    if (params.contractor == address(0)) {\\n      revert Errors.MG_ADDRESS_ZERO();\\n    }\\n\\n    if (params.contractor == msg.sender) {\\n      revert Errors.MG_CONTRACTOR_EQUALS_CONTRACTEE();\\n    }\\n\\n    if (params.underlayingToken == address(0)) {\\n      revert Errors.MG_INVALID_TOKEN();\\n    }\\n\\n    if (params.maturityDate <= block.timestamp) {\\n      revert Errors.MG_INVALID_MATURITY_DATE();\\n    }\\n\\n    // Secure the funds for the first cycle\\n    SafeERC20.safeTransferFrom(IERC20(params.underlayingToken), msg.sender, address(this), params.paymentCycleAmount);\\n    agreements[agreementNonce].state.escrowedFunds = params.paymentCycleAmount;\\n\\n    agreements[agreementNonce].parameters = Types.AgreementParameters({\\n      AGREEMENT_ID: agreementNonce,\\n      BEGINNING_DATE: params.beginningDate,\\n      MATURITY_DATE: params.maturityDate,\\n      PAYMENT_CYCLE_DURATION: params.paymentCycleDuration,\\n      PAYMENT_CYCLE_AMOUNT: params.paymentCycleAmount,\\n      ESTABLISHMENT_FEE_RATE: establishmentFeeRate,\\n      PENALIZATION_AMOUNT: penalizationAmount,\\n      UNDERLAYING_TOKEN: params.underlayingToken,\\n      CONTRACTOR: params.contractor,\\n      CONTRACTEE: msg.sender,\\n      DESCRIPTION_URI: params.descriptionURI\\n    });\\n\\n    userAgreements[msg.sender].push(agreementNonce);\\n    userAgreements[params.contractor].push(agreementNonce);\\n\\n    emit AgreementCreated(agreementNonce, params.contractor, msg.sender);\\n    agreementNonce++;\\n  }\\n\\n  /**\\n   * @notice Activates an agreement\\n   * @param agreementID The ID of the agreement to activate\\n   * @dev The agreement needs to be created, inactive and the funds for the first cycle set\\n   */\\n  function activateAgreement(uint256 agreementID) external whenPending(agreements[agreementID]) {\\n    Types.Agreement storage agreement = agreements[agreementID];\\n\\n    if (agreement.parameters.CONTRACTOR != msg.sender) {\\n      revert Errors.MG_UNAUTHORIZED();\\n    }\\n\\n    if (block.timestamp > agreement.parameters.BEGINNING_DATE) {\\n      revert Errors.MG_PAST_BEGINNING_DATE();\\n    }\\n\\n    agreement.state.active = true;\\n\\n    userAgreements[msg.sender].push(agreementNonce);\\n\\n    emit AgreementActivated(agreementID);\\n  }\\n\\n  /**\\n   * @notice Releases the funds for the current payment cycle\\n   * @param agreementID The ID of the agreement to release the funds for\\n   * @dev Only the keeper or contractee can call this function\\n   * @dev A for loop is used to calculate the migration periods instead of storing them on chain to reduce gas costs\\n   * @dev If there is a remainder, the last migration period will be shorter than the others and fall on the maturity date\\n   */\\n  function migrateFunds(uint256 agreementID)\\n    external\\n    whenNotPaused\\n    whenOngoing(agreements[agreementID])\\n    onlyAuthorized(agreements[agreementID])\\n  {\\n    Types.Agreement storage agreement = agreements[agreementID];\\n\\n    uint128 agreementDuration = agreement.parameters.MATURITY_DATE - agreement.parameters.BEGINNING_DATE;\\n    uint128 migrations = agreementDuration / agreement.parameters.PAYMENT_CYCLE_DURATION;\\n    bool validMigrationPeriod = false;\\n    bool reminder = agreementDuration % agreement.parameters.PAYMENT_CYCLE_DURATION != 0;\\n    for (uint128 i = 0; i < migrations; i++) {\\n      uint128 migrationPeriod = agreement.parameters.BEGINNING_DATE +\\n        (agreement.parameters.PAYMENT_CYCLE_DURATION * (i + 1));\\n      if (block.timestamp >= migrationPeriod) {\\n        if (block.timestamp <= migrationPeriod + challengeDuration) {\\n          validMigrationPeriod = true;\\n          break;\\n        }\\n      } else {\\n        break;\\n      }\\n    }\\n    if (!validMigrationPeriod) {\\n      if (reminder) {\\n        if (\\n          block.timestamp >= agreement.parameters.MATURITY_DATE &&\\n          block.timestamp <= agreement.parameters.MATURITY_DATE + challengeDuration\\n        ) {\\n          validMigrationPeriod = true;\\n        }\\n      }\\n    }\\n\\n    if (!validMigrationPeriod) {\\n      revert Errors.MG_INVALID_MIGRATION_PERIOD();\\n    }\\n\\n    agreement.state.escrowedFunds -= agreement.parameters.PAYMENT_CYCLE_AMOUNT;\\n    uint128 normalizedPaymentAmount = (agreement.parameters.PAYMENT_CYCLE_AMOUNT * establishmentFeeRate) / 100;\\n    accruedEstablishmentFee += agreement.parameters.PAYMENT_CYCLE_AMOUNT - normalizedPaymentAmount;\\n\\n    SafeERC20.safeTransfer(\\n      IERC20(agreement.parameters.UNDERLAYING_TOKEN),\\n      agreement.parameters.CONTRACTOR,\\n      normalizedPaymentAmount\\n    );\\n\\n    emit FundsMigrated(agreementID, agreement.parameters.PAYMENT_CYCLE_AMOUNT);\\n  }\\n\\n  function depositFundsForNextCycle(uint256 agreementID)\\n    external\\n    whenNotPaused\\n    whenOngoing(agreements[agreementID])\\n    onlyAuthorized(agreements[agreementID])\\n  {\\n    Types.Agreement storage agreement = agreements[agreementID];\\n    if (agreement.state.escrowedFunds != 0) {\\n      revert Errors.MG_FUNDS_ALREADY_SECURED();\\n    }\\n\\n    agreement.state.escrowedFunds += agreement.parameters.PAYMENT_CYCLE_AMOUNT;\\n    SafeERC20.safeTransferFrom(\\n      IERC20(agreement.parameters.UNDERLAYING_TOKEN),\\n      agreement.parameters.CONTRACTEE,\\n      address(this),\\n      agreement.parameters.PAYMENT_CYCLE_AMOUNT\\n    );\\n\\n    emit FundsDeposited(agreementID, agreement.parameters.PAYMENT_CYCLE_AMOUNT);\\n  }\\n\\n  /**\\n   * @notice Closes an agreement and releases the escrowed funds accordingly to the agreement state\\n   * @param agreementID The ID of the agreement\\n   * @dev only callable by the contractee\\n   */\\n  function cancelAgreement(uint256 agreementID) external whenNotPaused {\\n    Types.Agreement storage agreement = agreements[agreementID];\\n    if (agreement.parameters.CONTRACTEE != msg.sender) {\\n      revert Errors.MG_UNAUTHORIZED();\\n    }\\n\\n    agreement.state.closed = true;\\n    if (!agreement.state.active) {\\n      IERC20(agreement.parameters.UNDERLAYING_TOKEN).transfer(\\n        agreement.parameters.CONTRACTEE,\\n        agreement.state.escrowedFunds\\n      );\\n    } else {\\n      uint128 agreementDuration = agreement.parameters.MATURITY_DATE - agreement.parameters.BEGINNING_DATE;\\n      uint128 migrations = agreementDuration / agreement.parameters.PAYMENT_CYCLE_DURATION;\\n      bool reminder = agreementDuration % agreement.parameters.PAYMENT_CYCLE_DURATION != 0;\\n      uint128 paymentForSecond = agreement.parameters.PAYMENT_CYCLE_AMOUNT /\\n        agreement.parameters.PAYMENT_CYCLE_DURATION;\\n      for (uint128 i = 0; i < migrations; i++) {\\n        uint128 migrationStartPeriod = agreement.parameters.BEGINNING_DATE +\\n          (agreement.parameters.PAYMENT_CYCLE_DURATION * (i + 1));\\n        if (\\n          block.timestamp >= migrationStartPeriod &&\\n          block.timestamp <= migrationStartPeriod + agreement.parameters.PAYMENT_CYCLE_DURATION\\n        ) {\\n          IERC20(agreement.parameters.UNDERLAYING_TOKEN).transfer(\\n            agreement.parameters.CONTRACTOR,\\n            paymentForSecond * (block.timestamp - migrationStartPeriod) + agreement.parameters.PENALIZATION_AMOUNT\\n          );\\n          return;\\n        }\\n      }\\n      if (reminder) {\\n        if (\\n          block.timestamp >=\\n          agreement.parameters.BEGINNING_DATE + (agreement.parameters.PAYMENT_CYCLE_DURATION * (migrations)) &&\\n          block.timestamp <= agreement.parameters.MATURITY_DATE\\n        ) {\\n          IERC20(agreement.parameters.UNDERLAYING_TOKEN).transfer(\\n            agreement.parameters.CONTRACTOR,\\n            paymentForSecond *\\n              (agreement.parameters.MATURITY_DATE - block.timestamp) +\\n              agreement.parameters.PENALIZATION_AMOUNT\\n          );\\n          return;\\n        }\\n      }\\n    }\\n\\n    emit AgreementCancelled(agreementID);\\n  }\\n\\n  /**\\n   * @notice Sets the agreement state to challenged and emmits an event that will be captured by the Contractful DAO(\\n   * currently a multisig)\\n   * @param agreementID The ID of the agreement\\n   */\\n  function challengeAgreement(uint256 agreementID) external whenNotPaused whenOngoing(agreements[agreementID]) {\\n    Types.Agreement storage agreement = agreements[agreementID];\\n\\n    agreement.state.challenged = true;\\n\\n    emit AgreementChallenged(agreementID);\\n  }\\n\\n  /**\\n   * @notice Releases the escrowed funds accordingly to the percentages passed as parameters\\n   * @notice For the moment the function is only callable by governance wich is a multisig wallet. However in the future\\n   * it will only be callable by the Contractful DAO\\n   * @param agreementID The ID of the agreement\\n   * @param contractorPercentage The percentage of the escrowed funds to be released to the contractor\\n   * @param contracteePercentage The percentage of the escrowed funds to be released to the contractee\\n   * @dev Only integers can be passed as pecentages. The function does't calculate for decimal points\\n   */\\n  function splitFunds(\\n    uint256 agreementID,\\n    uint128 contractorPercentage,\\n    uint128 contracteePercentage\\n  ) external whenNotPaused onlyRole(Roles.GOVERNANCE_ROLE) {\\n    Types.Agreement storage agreement = agreements[agreementID];\\n\\n    assert(agreement.state.escrowedFunds != 0);\\n\\n    agreement.state.closed = true;\\n\\n    if (contractorPercentage + contracteePercentage != 100) {\\n      revert Errors.MG_INVALID_PERCENTAGES();\\n    }\\n\\n    uint128 contractorAmount = (agreement.state.escrowedFunds * contractorPercentage) / 100;\\n    uint128 contracteeAmount = (agreement.state.escrowedFunds * contracteePercentage) / 100;\\n\\n    IERC20(agreement.parameters.UNDERLAYING_TOKEN).transfer(agreement.parameters.CONTRACTOR, contractorAmount);\\n    IERC20(agreement.parameters.UNDERLAYING_TOKEN).transfer(agreement.parameters.CONTRACTEE, contracteeAmount);\\n\\n    emit FundsSplitted(agreementID, contractorAmount, contracteeAmount);\\n  }\\n\\n  // View Methods\\n\\n  /**\\n   * @notice Returns the parameters of an agreement\\n   * @param agreementID The ID of the agreement\\n   * @return beginningDate The beginning date of the agreement\\n   * @return maturityDate The date when the agreement expires\\n   * @return paymentCycleDuration The duration of a payment cycle\\n   * @return paymentCycleAmount The amount of tokens to be released per payment cycle\\n   * @return establishmentFeeRate_ The rate of the establishment fee\\n   * @return penalizationAmount_ The amount of tokens that will be kept in case of a penalization\\n   * @return underlayingToken The address of the token used for the agreement\\n   * @return contractor The address of the contractor\\n   * @return contractee The address of the contractee\\n   * @return descriptionURI The URI of the agreement description\\n   * @dev an agreement can be not active because it has not been activated or because it is closed\\n   */\\n  function getAgreementParameters(uint256 agreementID)\\n    external\\n    view\\n    returns (\\n      uint128 beginningDate,\\n      uint128 maturityDate,\\n      uint128 paymentCycleDuration,\\n      uint128 paymentCycleAmount,\\n      uint128 establishmentFeeRate_,\\n      uint128 penalizationAmount_,\\n      address underlayingToken,\\n      address contractor,\\n      address contractee,\\n      string memory descriptionURI\\n    )\\n  {\\n    Types.Agreement storage agreement = agreements[agreementID];\\n    return (\\n      agreement.parameters.BEGINNING_DATE,\\n      agreement.parameters.MATURITY_DATE,\\n      agreement.parameters.PAYMENT_CYCLE_DURATION,\\n      agreement.parameters.PAYMENT_CYCLE_AMOUNT,\\n      agreement.parameters.ESTABLISHMENT_FEE_RATE,\\n      agreement.parameters.PENALIZATION_AMOUNT,\\n      agreement.parameters.UNDERLAYING_TOKEN,\\n      agreement.parameters.CONTRACTOR,\\n      agreement.parameters.CONTRACTEE,\\n      agreement.parameters.DESCRIPTION_URI\\n    );\\n  }\\n\\n  /**\\n   * @notice Returns the state of an agreement\\n   * @param agreementID The ID of the agreement\\n   * @param escrowedFunds The amount of funds escrowed in the agreement\\n   * @param closed Whether the agreement is closed\\n   * @param challenged Whether the agreement is challenged\\n   * @param active Whether the agreement is active\\n   */\\n  function getAgreementState(uint256 agreementID)\\n    external\\n    view\\n    returns (\\n      uint128 escrowedFunds,\\n      bool closed,\\n      bool challenged,\\n      bool active\\n    )\\n  {\\n    Types.Agreement storage agreement = agreements[agreementID];\\n    return (agreement.state.escrowedFunds, agreement.state.closed, agreement.state.challenged, agreement.state.active);\\n  }\\n\\n  /**\\n   * @notice Returns the user agreements\\n   * @param user The address of the user\\n   * @return agreementIDs The IDs of the agreements\\n   */\\n  function getUserAgreements(address user) external view returns (uint256[] memory) {\\n    return userAgreements[user];\\n  }\\n\\n  // Managment methods. Only callable by Roles.GOVERNACE_ROLE\\n\\n  /**\\n   * @notice Sets the challenge duration for all agreements\\n   * @param challengeDuration_ The new challenge duration\\n   */\\n  function setChallengeDuration(uint128 challengeDuration_) external onlyRole(Roles.GOVERNANCE_ROLE) {\\n    challengeDuration = challengeDuration_;\\n  }\\n\\n  /**\\n   * @notice Set the establishment protocol fee rate\\n   * @param establishmentFeeRate_ The new establishment fee rate\\n   */\\n  function setEstablishmentFeeRate(uint128 establishmentFeeRate_) external onlyRole(Roles.GOVERNANCE_ROLE) {\\n    establishmentFeeRate = establishmentFeeRate_;\\n  }\\n\\n  /**\\n   * @notice Set the penalization amount for the protocol\\n   * @param penalizationAmount_ The new penalization amount\\n   */\\n  function setPenalizationAmount(uint128 penalizationAmount_) external onlyRole(Roles.GOVERNANCE_ROLE) {\\n    establishmentFeeRate = penalizationAmount_;\\n  }\\n\\n  /**\\n   * @notice Withdraws protocol fees to a target address\\n   * @param agreementID The identifier of the agreement\\n   * @param amount The amount of tokens claimed\\n   * @param to The address receiving the fees\\n   **/\\n  function claimProtocolFees(\\n    uint256 agreementID,\\n    uint128 amount,\\n    address to\\n  ) external onlyRole(Roles.GOVERNANCE_ROLE) {\\n    if (amount > accruedEstablishmentFee) {\\n      revert Errors.MG_AMOUNT_TOO_HIGH();\\n    }\\n    Types.Agreement storage agreement = agreements[agreementID];\\n    SafeERC20.safeTransfer(IERC20(agreement.parameters.UNDERLAYING_TOKEN), to, amount);\\n  }\\n\\n  /**\\n   * @notice Stops all actions on all agreements\\n   **/\\n  function freezeAgreements() external onlyRole(Roles.GOVERNANCE_ROLE) {\\n    _pause();\\n  }\\n\\n  /**\\n   * @notice Cancel a freeze, makes actions available again on all agreements\\n   **/\\n  function unfreezeAgreements() external onlyRole(Roles.GOVERNANCE_ROLE) {\\n    _unpause();\\n  }\\n}\\n\",\"keccak256\":\"0x36886c619f749b56de400d5f8e8fb25df61284fd088d56bfe3309ea21e0c34a1\",\"license\":\"MIT\"},\"src/Validator.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\n\\npragma solidity ^0.8.0;\\n\\ncontract Validator is AccessControlUpgradeable, PausableUpgradeable {\\n  string public constant name = \\\"Contractful\\\";\\n  mapping(uint256 => bool) public usedNonces;\\n  bytes32 public DOMAIN_SEPARATOR;\\n\\n  function initialize_() public onlyInitializing {\\n    uint256 chainId;\\n    assembly {\\n      chainId := chainid()\\n    }\\n\\n    DOMAIN_SEPARATOR = keccak256(\\n      abi.encode(\\n        keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n        keccak256(bytes(name)),\\n        keccak256(bytes(\\\"1\\\")),\\n        chainId,\\n        address(this)\\n      )\\n    );\\n  }\\n\\n  /**\\n   * @notice checks whether the signer signed the description\\n   */\\n  function validateDescription(\\n    address signer,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s,\\n    string calldata description,\\n    uint256 nonce\\n  ) public returns (bool) {\\n    require(!usedNonces[nonce]);\\n    usedNonces[nonce] = true;\\n\\n    bytes32 message = keccak256(\\n      abi.encode(keccak256(\\\"Signature(string description, uint256 nonce)\\\"), description, nonce)\\n    );\\n\\n    bytes32 digest = keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", DOMAIN_SEPARATOR, message));\\n\\n    address recovered = ecrecover(digest, v, r, s);\\n    return signer != address(0) && signer == recovered;\\n  }\\n}\\n\",\"keccak256\":\"0xbe91ab72907eadc476e65203a570ca58cf6efae9adf1680bf5d6b61d01517a1e\",\"license\":\"MIT\"},\"src/lib/Errors.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary Errors {\\n  // *** Contract Specific Errors ***\\n  // Manager Contract\\n  error MG_NOT_ONGOING(); // \\\"The agreement is not ongoing\\\"\\n  error MG_AGREEMENT_NOT_PENDING(); // \\\"The agreement is not pending. It can be active or closed\\\"\\n  error MG_UNAUTHORIZED(); // \\\"msg.sender lacks the authorizations required\\\"\\n  error MG_CONTRACTOR_EQUALS_CONTRACTEE(); // \\\"The contractor and the contractee cannot be the same\\\"\\n  error MG_INVALID_MATURITY_DATE(); // \\\"The maturity date must be in the future\\\"\\n  error MG_INVALID_TOKEN(); // \\\"The token is not an accepted token. It probably is a zero address\\\"\\n  error MG_ADDRESS_ZERO(); // \\\"The address cannot be zero\\\"\\n  error MG_INVALID_MIGRATION_PERIOD(); // \\\"The migration period is not valid\\\"\\n  error MG_AMOUNT_TOO_HIGH(); // \\\"The amount is too high\\\"\\n  error MG_FUNDS_ALREADY_SECURED(); // \\\"The funds are already secured\\\"\\n  error MG_INVALID_PERCENTAGES(); // \\\"The percentages are not valid. For the moment they must sum up to 100\\\"\\n  error MG_AGREEMENT_ALREADY_CHALLENGED(); // \\\"The agreement is already challenged\\\"\\n  error MG_PAST_BEGINNING_DATE(); // \\\"The date is in the past\\\"\\n}\\n\",\"keccak256\":\"0x10f0038ea80fd124a720b1e4f1c7f2caa73206db78ecb2ddeaf3f615fd1a03a1\",\"license\":\"MIT\"},\"src/lib/IManager.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title IManager\\n * @author Contractful Labs\\n * @notice Lets users create and manage contract work agreements\\n */\\n\\ninterface IManager {\\n  // EVENTS\\n\\n  /**\\n   * @notice Emitted after a event was creted\\n   * @param agreementID The ID of the agreement\\n   * @param contractor The address of the contractor\\n   * @param contractee The address of the contractee\\n   **/\\n  event AgreementCreated(uint256 agreementID, address contractor, address contractee);\\n\\n  /**\\n   * @notice Emitted after a agreement was activated\\n   * @param agreementID The ID of the agreement\\n   **/\\n  event AgreementActivated(uint256 agreementID);\\n\\n  /**\\n   * @notice Emitted after funds were migrated\\n   * @param agreement The ID of the agreement\\n   * @param amount The amount of tokens that were migrated\\n   **/\\n  event FundsMigrated(uint256 agreement, uint128 amount);\\n\\n  /**\\n   * @notice Emitted after funds are deposited for the upcoming cycle\\n   * @param agreement The ID of the agreement\\n   * @param amount The amount of tokens that were deposited\\n   */\\n  event FundsDeposited(uint256 agreement, uint128 amount);\\n\\n  /**\\n   * @notice Emitted after a agreement was cancelled\\n   * @param agreementID The ID of the agreement\\n   */\\n  event AgreementCancelled(uint256 agreementID);\\n\\n  /**\\n   * @notice Emitted after the escrowd funds for an agreement were splitted\\n   * @param agreementID The ID of the agreement\\n   */\\n  event FundsSplitted(uint256 agreementID, uint128 contractorAmount, uint128 contracteeAmount);\\n\\n  /**\\n   * @notice Emitted after an agreement was challenged\\n   * @param agreementID the ID of the agreement\\n   */\\n  event AgreementChallenged(uint256 agreementID);\\n\\n  // VIEW Methods\\n\\n  /**\\n   * @notice Returns the parameters of an agreement\\n   * @param agreementID The ID of the agreement\\n   * @return beginningDate The beginning date of the agreement\\n   * @return maturityDate The date when the agreement expires\\n   * @return paymentCycleDuration The duration of a payment cycle\\n   * @return paymentCycleAmount The amount of tokens to be released per payment cycle\\n   * @return establishmentFeeRate The rate of the establishment fee\\n   * @return penalizationAmount The amount of tokens that will be kept in case of a penalization\\n   * @return underlayingToken The address of the token used for the agreement\\n   * @return contractor The address of the contractor\\n   * @return contractee The address of the contractee\\n   * @return descriptionURI The URI of the agreement description\\n   * @dev an agreement can be not active because it has not been activated or because it is closed\\n   */\\n  function getAgreementParameters(uint256 agreementID)\\n    external\\n    view\\n    returns (\\n      uint128 beginningDate,\\n      uint128 maturityDate,\\n      uint128 paymentCycleDuration,\\n      uint128 paymentCycleAmount,\\n      uint128 establishmentFeeRate,\\n      uint128 penalizationAmount,\\n      address underlayingToken,\\n      address contractor,\\n      address contractee,\\n      string memory descriptionURI\\n    );\\n\\n  /**\\n   * @notice Returns the state of an agreement\\n   * @param agreementID The ID of the agreement\\n   * @param escrowedFunds The amount of funds escrowed in the agreement\\n   * @param closed Whether the agreement is closed\\n   * @param challenged Whether the agreement is challenged\\n   * @param active Whether the agreement is active\\n   */\\n  function getAgreementState(uint256 agreementID)\\n    external\\n    view\\n    returns (\\n      uint128 escrowedFunds,\\n      bool closed,\\n      bool challenged,\\n      bool active\\n    );\\n\\n  // MUTATIVE Methods\\n\\n  struct AgreementCreationParams {\\n    uint128 beginningDate;\\n    uint128 maturityDate;\\n    uint128 paymentCycleDuration;\\n    uint128 paymentCycleAmount;\\n    address underlayingToken;\\n    address contractor;\\n    string descriptionURI;\\n  }\\n\\n  /**\\n   * @notice Creates a new agreement\\n   * @param params The parameters of the agreement\\n   */\\n  function createAgreement(AgreementCreationParams calldata params) external;\\n\\n  /**\\n   * @notice Activates an agreement\\n   * @param agreementID The ID of the agreement to activate\\n   */\\n  function activateAgreement(uint256 agreementID) external;\\n\\n  /**\\n   * @notice Set the establishment protocol fee rate\\n   **/\\n  function setEstablishmentFeeRate(uint128 establishmentFeeRate) external;\\n\\n  /**\\n   * @notice Releases the funds for the current payment cycle\\n   * @param agreementID The ID of the agreement to release the funds for\\n   */\\n  function migrateFunds(uint256 agreementID) external;\\n\\n  /**\\n   * @notice Closes an agreement and releases the escrowed funds accordingly to the agreement state\\n   * @param agreementID The ID of the agreement\\n   */\\n  function cancelAgreement(uint256 agreementID) external;\\n\\n  /**\\n   * @notice Sets the agreement state to challenged and emmits an event that will be captured by the Contractful DAO(\\n   * currently a multisig)\\n   * @param agreementID The ID of the agreement\\n   */\\n  function challengeAgreement(uint256 agreementID) external;\\n\\n  /**\\n   * @notice Releases the escrowed funds accordingly to the percentages passed as parameters\\n   * @notice For the moment the function is only callable by governance wich is a multisig wallet. However in the future\\n   * it will only be callable by the Contractful DAO\\n   * @param agreementID The ID of the agreement\\n   * @param contractorPercentage The percentage of the escrowed funds to be released to the contractor\\n   * @param contracteePercentage The percentage of the escrowed funds to be released to the contractee\\n   * @dev Only integers can be passed as pecentages. The function does't calculate for decimal points\\n   */\\n  function splitFunds(\\n    uint256 agreementID,\\n    uint128 contractorPercentage,\\n    uint128 contracteePercentage\\n  ) external;\\n\\n  /**\\n   * @notice Withdraws protocol fees to a target address\\n   * @param agreementID The identifier of the agreement\\n   * @param amount The amount of tokens claimed\\n   * @param to The address receiving the fees\\n   **/\\n  function claimProtocolFees(\\n    uint256 agreementID,\\n    uint128 amount,\\n    address to\\n  ) external;\\n\\n  /**\\n   * @notice Stops all actions on all agreements\\n   **/\\n  function freezeAgreements() external;\\n\\n  /**\\n   * @notice Cancel a freeze, makes actions available again on all agreements\\n   **/\\n  function unfreezeAgreements() external;\\n}\\n\",\"keccak256\":\"0xf78f97c63140a0df6c3575328f166fd180084bc6dd4467a835dd1575f9e4b2dc\",\"license\":\"AGPL-3.0\"},\"src/lib/Roles.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary Roles {\\n  bytes32 public constant GOVERNANCE_ROLE = keccak256(\\\"GOVERNANCE_ROLE\\\");\\n  bytes32 public constant KEEPER_ROLE = keccak256(\\\"KEEPER_ROLE\\\");\\n}\\n\",\"keccak256\":\"0xe03289aef551538ce8e18b8a3a37ad8f37627122b16305ee1a1a3fbd4be5ceed\",\"license\":\"MIT\"},\"src/lib/Types.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\nlibrary Types {\\n  /* The protocol's fee rate and penalization amount are stored in each agreement so if they changes, they will not affect\\n previous agreements */\\n  struct AgreementParameters {\\n    uint256 AGREEMENT_ID;\\n    uint128 BEGINNING_DATE;\\n    uint128 MATURITY_DATE;\\n    uint128 PAYMENT_CYCLE_DURATION;\\n    uint128 PAYMENT_CYCLE_AMOUNT;\\n    uint128 ESTABLISHMENT_FEE_RATE;\\n    uint128 PENALIZATION_AMOUNT;\\n    address UNDERLAYING_TOKEN;\\n    address CONTRACTOR;\\n    address CONTRACTEE;\\n    string DESCRIPTION_URI;\\n  }\\n\\n  struct AgreementState {\\n    uint128 escrowedFunds;\\n    bool closed;\\n    bool challenged;\\n    bool active;\\n  }\\n\\n  struct Agreement {\\n    AgreementParameters parameters;\\n    AgreementState state;\\n  }\\n}\\n\",\"keccak256\":\"0xc81d3ca5acfc995995aa03343ba546dbb8960eea039457e0228f67426c03a2f4\",\"license\":\"AGPL-3.0\"}},\"version\":1}",
  "bytecode": "0x6080604052600060cd55600160ce5534801561001a57600080fd5b5061344f8061002a6000396000f3fe608060405234801561001057600080fd5b506004361061021c5760003560e01c80635c975abb116101255780639eb6156c116100ad578063adb9cae61161007c578063adb9cae614610509578063bd14de9614610529578063d547741f1461054a578063de6403901461055d578063e86295141461057057600080fd5b80639eb6156c146104d2578063a0cc8d2c146104e5578063a217fddf146104ee578063a63197d2146104f657600080fd5b80636726e867116100f45780636726e8671461047e5780636944560c146104915780638aa6ded5146104a457806391d14854146104b757806392d5b544146104ca57600080fd5b80635c975abb146103bc57806362e414a4146103c757806363f749f5146103da5780636717e41c1461045b57600080fd5b80632f2ff15d116101a85780633bc52866116101775780633bc5286614610370578063419ffe2c14610383578063429fba4a146102e95780634c27984e146103965780635686b54b146103a957600080fd5b80632f2ff15d1461032e5780633644e5151461034157806336568abe1461034a5780633a67c2f81461035d57600080fd5b80631333f2b7116101ef5780631333f2b71461029d5780631c8abcec146102b0578063248a9ca3146102b8578063291420b3146102e9578063292f2e0e146102fc57600080fd5b806301ffc9a71461022157806306fdde03146102495780630b2655d9146102805780630bd30c1214610295575b600080fd5b61023461022f366004612a50565b610599565b60405190151581526020015b60405180910390f35b6102736040518060400160405280600b81526020016a10dbdb9d1c9858dd199d5b60aa1b81525081565b6040516102409190612aca565b61029361028e366004612add565b6105d0565b005b610293610a2c565b6102936102ab366004612b34565b610a4f565b610293610a87565b6102db6102c6366004612b4f565b60009081526065602052604090206001015490565b604051908152602001610240565b6102936102f7366004612b34565b610b8b565b60cb5461031690600160801b90046001600160801b031681565b6040516001600160801b039091168152602001610240565b61029361033c366004612b7f565b610bc6565b6102db60ca5481565b610293610358366004612b7f565b610bf0565b61029361036b366004612bab565b610c6e565b61029361037e366004612b4f565b610e18565b60cb54610316906001600160801b031681565b6102db6103a4366004612bd5565b61121f565b6102936103b7366004612b4f565b611250565b60975460ff16610234565b6102936103d5366004612bff565b6116e0565b6104296103e8366004612b4f565b600090815260d060205260409020600801546001600160801b0381169160ff600160801b8304811692600160881b8104821692600160901b90910490911690565b604080516001600160801b03909516855292151560208501529015159183019190915215156060820152608001610240565b610234610469366004612b4f565b60c96020526000908152604090205460ff1681565b61029361048c366004612c3b565b61175b565b61023461049f366004612c6e565b611995565b60cc54610316906001600160801b031681565b6102346104c5366004612b7f565b611af5565b610293611b20565b6102936104e0366004612b4f565b611b40565b6102db60ce5481565b6102db600081565b610293610504366004612b4f565b611c06565b61051c610517366004612d27565b611e15565b6040516102409190612d42565b61053c610537366004612b4f565b611e81565b604051610240929190612d86565b610293610558366004612b7f565b612017565b61029361056b366004612b4f565b61203c565b61058361057e366004612b4f565b612163565b6040516102409a99989796959493929190612ec5565b60006001600160e01b03198216637965db0b60e01b14806105ca57506301ffc9a760e01b6001600160e01b03198316145b92915050565b6105d8612297565b60ce54600090815260d06020526040902054156105f7576105f7612f44565b600061060960c0830160a08401612d27565b6001600160a01b031603610630576040516305bf1d9d60e21b815260040160405180910390fd5b3361064160c0830160a08401612d27565b6001600160a01b031603610668576040516346a4b5e960e01b815260040160405180910390fd5b600061067a60a0830160808401612d27565b6001600160a01b0316036106a157604051639b84273b60e01b815260040160405180910390fd5b426106b26040830160208401612b34565b6001600160801b0316116106d957604051630dcde81360e11b815260040160405180910390fd5b61070c6106ec60a0830160808401612d27565b33306106fe6080860160608701612b34565b6001600160801b03166122df565b61071c6080820160608301612b34565b60ce8054600090815260d0602090815260409182902060080180546001600160801b0319166001600160801b0395909516949094179093558051610160810190915290548152908181019061077390840184612b34565b6001600160801b031681526020018260200160208101906107949190612b34565b6001600160801b031681526020016107b26060840160408501612b34565b6001600160801b031681526020016107d06080840160608501612b34565b6001600160801b03908116825260cc548116602083015260cb5416604082015260600161080360a0840160808501612d27565b6001600160a01b0316815260200161082160c0840160a08501612d27565b6001600160a01b0316815233602082015260400161084260c0840184612f5a565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092018290525093909452505060ce54815260d060209081526040918290208451815590840151918401516001600160801b03928316600160801b918416820217600183015560608501516080860151908416908416820217600283015560a085015160c086015190841693160291909117600382015560e08301516004820180546001600160a01b03199081166001600160a01b039384161790915561010085015160058401805483169184169190911790556101208501516006840180549092169216919091179055610140830151909150600782019061094e9082613046565b505033600090815260cf60208181526040832060ce5481546001810183559185529184200155915061098660c0840160a08501612d27565b6001600160a01b03168152602080820192909252604001600090812060ce80548254600181018455928452939092200191909155547fe037ec30313eecdd927ffae3beed86a87b82f7bb794966ec08d75cf1a6e82686906109ed60c0840160a08501612d27565b604080519283526001600160a01b039091166020830152339082015260600160405180910390a160ce8054906000610a248361311c565b919050555050565b6000805160206133fa833981519152610a4481612350565b610a4c61235a565b50565b6000805160206133fa833981519152610a6781612350565b5060cb80546001600160801b03928316600160801b029216919091179055565b600054610100900460ff16610ab75760405162461bcd60e51b8152600401610aae90613135565b60405180910390fd5b604080518082018252600b81526a10dbdb9d1c9858dd199d5b60aa1b6020918201528151808301835260018152603160f81b9082015281517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f818301527f4489533f11b9cc5c3a483b23f3634cc7d8cb2e3435fc90a29c7903cb1dd23ce8818401527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a0808301919091528351808303909101815260c0909101909252815191012060ca55565b6000805160206133fa833981519152610ba381612350565b5060cc80546001600160801b0319166001600160801b0392909216919091179055565b600082815260656020526040902060010154610be181612350565b610beb83836123ac565b505050565b6001600160a01b0381163314610c605760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610aae565b610c6a8282612432565b5050565b600054610100900460ff1615808015610c8e5750600054600160ff909116105b80610ca85750303b158015610ca8575060005460ff166001145b610d0b5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610aae565b6000805460ff191660011790558015610d2e576000805461ff0019166101001790555b610d36610a87565b610d3e612499565b610d466124c0565b60cb80546001600160801b03808616600160801b0291161790556001600160a01b038216610d72573391505b610d7d6000836123ac565b610d956000805160206133fa833981519152836123ac565b610dcd7ffc8737ab85eb45125971625a9ebdb75cc78e01d5c1fa80c4c6e5203f47bc4fab6000805160206133fa8339815191526124f3565b8015610beb576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a1505050565b610e20612297565b600081815260d0602052604090206008810154600160901b900460ff161580610e5457506008810154600160801b900460ff165b80610e6a57506008810154600160881b900460ff165b15610e885760405163c9c2be6d60e01b815260040160405180910390fd5b600082815260d06020526040902060068101546001600160a01b03163314801590610eda5750610ed87ffc8737ab85eb45125971625a9ebdb75cc78e01d5c1fa80c4c6e5203f47bc4fab33611af5565b155b8015610efb5750610ef96000805160206133fa83398151915233611af5565b155b15610f19576040516303135bad60e61b815260040160405180910390fd5b600083815260d0602052604081206001810154909190610f4c906001600160801b0380821691600160801b900416613180565b6002830154909150600090610f6a906001600160801b0316836131bd565b60028401549091506000908190610f8a906001600160801b0316856131e3565b6001600160801b03161515905060005b836001600160801b0316816001600160801b03161015611057576000610fc1826001613209565b6002880154610fd991906001600160801b0316613229565b6001880154610ff191906001600160801b0316613209565b9050806001600160801b0316421061103e5760cb5461102090600160801b90046001600160801b031682613209565b6001600160801b03164211611039576001935050611057565b611044565b50611057565b508061104f81613254565b915050610f9a565b50816110c35780156110c3576001850154600160801b90046001600160801b031642108015906110b9575060cb5460018601546110ac916001600160801b03600160801b918290048116929190910416613209565b6001600160801b03164211155b156110c357600191505b816110e1576040516381c4a38760e01b815260040160405180910390fd5b60028501546008860180546001600160801b03600160801b90930483169260009161110e91859116613180565b82546101009290920a6001600160801b0381810219909316918316021790915560cc5460028801546000935060649261115192811691600160801b900416613229565b61115b91906131bd565b600287015490915061117e908290600160801b90046001600160801b0316613180565b6001600160801b031660cd6000828254611198919061327a565b9091555050600486015460058701546111c7916001600160a01b0390811691166001600160801b03841661253e565b6002860154604080518b8152600160801b9092046001600160801b031660208301527f101b32dc248c08277c4e9a662cd218570f12dccd5a0166380a12991934175f15910160405180910390a1505050505050505050565b60cf602052816000526040600020818154811061123b57600080fd5b90600052602060002001600091509150505481565b611258612297565b600081815260d06020526040902060068101546001600160a01b03163314611293576040516303135bad60e61b815260040160405180910390fd5b60088101805460ff60801b1916600160801b1790819055600160901b900460ff16611346576004808201546006830154600884015460405163a9059cbb60e01b81526001600160a01b039384169463a9059cbb946112fd9416926001600160801b0316910161328d565b6020604051808303816000875af115801561131c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061134091906132af565b506116a9565b600181015460009061136b906001600160801b0380821691600160801b900416613180565b6002830154909150600090611389906001600160801b0316836131bd565b60028401549091506000906113a7906001600160801b0316846131e3565b60028501546001600160801b03918216151592506000916113d49180821691600160801b909104166131bd565b905060005b836001600160801b0316816001600160801b0316101561155c576000611400826001613209565b600288015461141891906001600160801b0316613229565b600188015461143091906001600160801b0316613209565b9050806001600160801b0316421015801561146b5750600287015461145e906001600160801b031682613209565b6001600160801b03164211155b15611549576004870154600588015460038901546001600160a01b039283169263a9059cbb9216906001600160801b03600160801b9091048116906114b2908616426132d1565b6114c5906001600160801b0389166132e4565b6114cf919061327a565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af115801561151a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061153e91906132af565b505050505050505050565b508061155481613254565b9150506113d9565b5081156116a457600285015461157c9084906001600160801b0316613229565b600186015461159491906001600160801b0316613209565b6001600160801b031642101580156115c057506001850154600160801b90046001600160801b03164211155b156116a45760048501546005860154600387015460018801546001600160a01b039384169363a9059cbb9316916001600160801b03600160801b9182900481169261160f9242929104166132d1565b611622906001600160801b0387166132e4565b61162c919061327a565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af1158015611677573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061169b91906132af565b50505050505050565b505050505b6040518281527f0cae0523c4d6568388c55dcaeb921d927527a60000ca46adffedddf87225f0ec9060200160405180910390a15050565b6000805160206133fa8339815191526116f881612350565b60cd54836001600160801b0316111561172457604051630c7c9a7f60e11b815260040160405180910390fd5b600084815260d0602052604090206004810154611754906001600160a01b0316846001600160801b03871661253e565b5050505050565b611763612297565b6000805160206133fa83398151915261177b81612350565b600084815260d060205260408120600881015490916001600160801b0390911690036117a9576117a9612f44565b60088101805460ff60801b1916600160801b1790556117c88385613209565b6001600160801b03166064146117f157604051630ab76a2560e41b815260040160405180910390fd5b60088101546000906064906118109087906001600160801b0316613229565b61181a91906131bd565b600883015490915060009060649061183c9087906001600160801b0316613229565b61184691906131bd565b600484810154600586015460405163a9059cbb60e01b81529394506001600160a01b039182169363a9059cbb93611883939092169187910161328d565b6020604051808303816000875af11580156118a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118c691906132af565b50600480840154600685015460405163a9059cbb60e01b81526001600160a01b039283169363a9059cbb936118ff93169186910161328d565b6020604051808303816000875af115801561191e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061194291906132af565b50604080518881526001600160801b03848116602083015283168183015290517fcc66abc0fd6a7a2cd2810119d6bcbcbeba5a22f087936e5105ac81e84563393c9181900360600190a150505050505050565b600081815260c9602052604081205460ff16156119b157600080fd5b600082815260c960209081526040808320805460ff1916600117905551611a00917f9b5039e58350b398e1e74d78733f690324b2aafee15033156b0ba14d8846461091889188918891016132fb565b604051602081830303815290604052805190602001209050600060ca5482604051602001611a4592919061190160f01b81526002810192909252602282015260420190565b60408051601f198184030181528282528051602091820120600080855291840180845281905260ff8d1692840192909252606083018b9052608083018a90529092509060019060a0016020604051602081039080840390855afa158015611ab0573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038b1615801590611ae65750806001600160a01b03168b6001600160a01b0316145b9b9a5050505050505050505050565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6000805160206133fa833981519152611b3881612350565b610a4c61256e565b611b48612297565b600081815260d0602052604090206008810154600160901b900460ff161580611b7c57506008810154600160801b900460ff165b80611b9257506008810154600160881b900460ff165b15611bb05760405163c9c2be6d60e01b815260040160405180910390fd5b600082815260d060205260409081902060088101805460ff60881b1916600160881b17905590517fa34da6d2673f1264c5d1d4d7d5edaa12c53e8615fa6183cc1cfe6b6510637fce90610e0b9085815260200190565b611c0e612297565b600081815260d0602052604090206008810154600160901b900460ff161580611c4257506008810154600160801b900460ff165b80611c5857506008810154600160881b900460ff165b15611c765760405163c9c2be6d60e01b815260040160405180910390fd5b600082815260d06020526040902060068101546001600160a01b03163314801590611cc85750611cc67ffc8737ab85eb45125971625a9ebdb75cc78e01d5c1fa80c4c6e5203f47bc4fab33611af5565b155b8015611ce95750611ce76000805160206133fa83398151915233611af5565b155b15611d07576040516303135bad60e61b815260040160405180910390fd5b600083815260d06020526040902060088101546001600160801b031615611d41576040516351f16c9360e11b815260040160405180910390fd5b60028101546008820180546001600160801b03600160801b909304831692600091611d6e91859116613209565b82546101009290920a6001600160801b03818102199093169183160217909155600483015460068401546002850154611dc294506001600160a01b039283169392909116913091600160801b9004166122df565b600281015460408051868152600160801b9092046001600160801b031660208301527fd91647d68fadbc904f923d642788552eca006a63f0a8e08d123f6c901d963051910160405180910390a150505050565b6001600160a01b038116600090815260cf6020908152604091829020805483518184028101840190945280845260609392830182828015611e7557602002820191906000526020600020905b815481526020019060010190808311611e61575b50505050509050919050565b60d0602090815260009182526040918290208251610160810184528154815260018201546001600160801b0380821694830194909452600160801b908190048416948201949094526002820154808416606083015284900483166080820152600382015480841660a08301529390930490911660c083015260048101546001600160a01b0390811660e0840152600582015481166101008401526006820154166101208301526007810180549192918391610140840191611f4190612fbe565b80601f0160208091040260200160405190810160405280929190818152602001828054611f6d90612fbe565b8015611fba5780601f10611f8f57610100808354040283529160200191611fba565b820191906000526020600020905b815481529060010190602001808311611f9d57829003601f168201915b505050919092525050604080516080810182526008909401546001600160801b038116855260ff600160801b8204811615156020870152600160881b82048116151592860192909252600160901b90041615156060840152509082565b60008281526065602052604090206001015461203281612350565b610beb8383612432565b600081815260d0602052604090206008810154600160801b900460ff168061206f57506008810154600160901b900460ff165b1561208d57604051638549e3e360e01b815260040160405180910390fd5b600082815260d06020526040902060058101546001600160a01b031633146120c8576040516303135bad60e61b815260040160405180910390fd5b60018101546001600160801b03164211156120f657604051636b506e1760e01b815260040160405180910390fd5b60088101805460ff60901b1916600160901b17905533600090815260cf6020908152604080832060ce5481546001810183559185529290932090920155517fea49e8aa1bbaa9a7b16632ed4aba908b3c702861a23436c8356e296c228cc27890610e0b9085815260200190565b600081815260d060205260408120600181015460028201546003830154600484015460058501546006860154600787018054899889988998899889988998899889986060986001600160801b0380891698600160801b9081900482169880831698908290048316978184169792909104909216946001600160a01b03928316949183169392169181906121f590612fbe565b80601f016020809104026020016040519081016040528092919081815260200182805461222190612fbe565b801561226e5780601f106122435761010080835404028352916020019161226e565b820191906000526020600020905b81548152906001019060200180831161225157829003601f168201915b505050505090509a509a509a509a509a509a509a509a509a509a50509193959799509193959799565b60975460ff16156122dd5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610aae565b565b6040516001600160a01b038085166024830152831660448201526064810182905261234a9085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526125ab565b50505050565b610a4c813361267d565b6123626126d6565b6097805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6123b68282611af5565b610c6a5760008281526065602090815260408083206001600160a01b03851684529091529020805460ff191660011790556123ee3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b61243c8282611af5565b15610c6a5760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600054610100900460ff166122dd5760405162461bcd60e51b8152600401610aae90613135565b600054610100900460ff166124e75760405162461bcd60e51b8152600401610aae90613135565b6097805460ff19169055565b600082815260656020526040808220600101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b6040516001600160a01b038316602482015260448101829052610beb90849063a9059cbb60e01b90606401612313565b612576612297565b6097805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861238f3390565b6000612600826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661271f9092919063ffffffff16565b805190915015610beb578080602001905181019061261e91906132af565b610beb5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610aae565b6126878282611af5565b610c6a5761269481612738565b61269f83602061274a565b6040516020016126b092919061333b565b60408051601f198184030181529082905262461bcd60e51b8252610aae91600401612aca565b60975460ff166122dd5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610aae565b606061272e84846000856128e6565b90505b9392505050565b60606105ca6001600160a01b03831660145b606060006127598360026132e4565b61276490600261327a565b67ffffffffffffffff81111561277c5761277c612fa8565b6040519080825280601f01601f1916602001820160405280156127a6576020820181803683370190505b509050600360fc1b816000815181106127c1576127c16133b0565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106127f0576127f06133b0565b60200101906001600160f81b031916908160001a90535060006128148460026132e4565b61281f90600161327a565b90505b6001811115612897576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110612853576128536133b0565b1a60f81b828281518110612869576128696133b0565b60200101906001600160f81b031916908160001a90535060049490941c93612890816133c6565b9050612822565b5083156127315760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610aae565b6060824710156129475760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610aae565b6001600160a01b0385163b61299e5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610aae565b600080866001600160a01b031685876040516129ba91906133dd565b60006040518083038185875af1925050503d80600081146129f7576040519150601f19603f3d011682016040523d82523d6000602084013e6129fc565b606091505b5091509150612a0c828286612a17565b979650505050505050565b60608315612a26575081612731565b825115612a365782518084602001fd5b8160405162461bcd60e51b8152600401610aae9190612aca565b600060208284031215612a6257600080fd5b81356001600160e01b03198116811461273157600080fd5b60005b83811015612a95578181015183820152602001612a7d565b50506000910152565b60008151808452612ab6816020860160208601612a7a565b601f01601f19169290920160200192915050565b6020815260006127316020830184612a9e565b600060208284031215612aef57600080fd5b813567ffffffffffffffff811115612b0657600080fd5b820160e0818503121561273157600080fd5b80356001600160801b0381168114612b2f57600080fd5b919050565b600060208284031215612b4657600080fd5b61273182612b18565b600060208284031215612b6157600080fd5b5035919050565b80356001600160a01b0381168114612b2f57600080fd5b60008060408385031215612b9257600080fd5b82359150612ba260208401612b68565b90509250929050565b60008060408385031215612bbe57600080fd5b612bc783612b18565b9150612ba260208401612b68565b60008060408385031215612be857600080fd5b612bf183612b68565b946020939093013593505050565b600080600060608486031215612c1457600080fd5b83359250612c2460208501612b18565b9150612c3260408501612b68565b90509250925092565b600080600060608486031215612c5057600080fd5b83359250612c6060208501612b18565b9150612c3260408501612b18565b600080600080600080600060c0888a031215612c8957600080fd5b612c9288612b68565b9650602088013560ff81168114612ca857600080fd5b95506040880135945060608801359350608088013567ffffffffffffffff80821115612cd357600080fd5b818a0191508a601f830112612ce757600080fd5b813581811115612cf657600080fd5b8b6020828501011115612d0857600080fd5b60208301955080945050505060a0880135905092959891949750929550565b600060208284031215612d3957600080fd5b61273182612b68565b6020808252825182820181905260009190848201906040850190845b81811015612d7a57835183529284019291840191600101612d5e565b50909695505050505050565b60a08152825160a082015260006020840151612dad60c08401826001600160801b03169052565b5060408401516001600160801b03811660e0840152506060840151610100612ddf818501836001600160801b03169052565b60808601519150610120612dfd818601846001600160801b03169052565b60a08701519250610140612e1b818701856001600160801b03169052565b60c08801519350610160612e39818801866001600160801b03169052565b60e08901516001600160a01b039081166101808901529389015184166101a0880152918801519092166101c0860152908601516101e08501919091529050612e85610200840182612a9e565b91505061273160208301846001600160801b0381511682526020810151151560208301526040810151151560408301526060810151151560608301525050565b6001600160801b038b811682528a81166020830152898116604083015288811660608301528781166080830152861660a08201526001600160a01b0385811660c083015284811660e083015283166101008201526101406101208201819052600090612f3383820185612a9e565b9d9c50505050505050505050505050565b634e487b7160e01b600052600160045260246000fd5b6000808335601e19843603018112612f7157600080fd5b83018035915067ffffffffffffffff821115612f8c57600080fd5b602001915036819003821315612fa157600080fd5b9250929050565b634e487b7160e01b600052604160045260246000fd5b600181811c90821680612fd257607f821691505b602082108103612ff257634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115610beb57600081815260208120601f850160051c8101602086101561301f5750805b601f850160051c820191505b8181101561303e5782815560010161302b565b505050505050565b815167ffffffffffffffff81111561306057613060612fa8565b6130748161306e8454612fbe565b84612ff8565b602080601f8311600181146130a957600084156130915750858301515b600019600386901b1c1916600185901b17855561303e565b600085815260208120601f198616915b828110156130d8578886015182559484019460019091019084016130b9565b50858210156130f65787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052601160045260246000fd5b60006001820161312e5761312e613106565b5060010190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6001600160801b038281168282160390808211156131a0576131a0613106565b5092915050565b634e487b7160e01b600052601260045260246000fd5b60006001600160801b03808416806131d7576131d76131a7565b92169190910492915050565b60006001600160801b03808416806131fd576131fd6131a7565b92169190910692915050565b6001600160801b038181168382160190808211156131a0576131a0613106565b6001600160801b0381811683821602808216919082811461324c5761324c613106565b505092915050565b60006001600160801b0380831681810361327057613270613106565b6001019392505050565b808201808211156105ca576105ca613106565b6001600160a01b039290921682526001600160801b0316602082015260400190565b6000602082840312156132c157600080fd5b8151801515811461273157600080fd5b818103818111156105ca576105ca613106565b80820281158282048414176105ca576105ca613106565b848152606060208201528260608201528284608083013760006080848301015260006080601f19601f860116830101905082604083015295945050505050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351613373816017850160208801612a7a565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516133a4816028840160208801612a7a565b01602801949350505050565b634e487b7160e01b600052603260045260246000fd5b6000816133d5576133d5613106565b506000190190565b600082516133ef818460208701612a7a565b919091019291505056fe71840dc4906352362b0cdaf79870196c8e42acafade72d5d5a6d59291253ceb1a2646970667358221220d6caf68c44b31b87bbab4ac45d4bb75fef2d244ed5e989a00cfe160c5f18006a64736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061021c5760003560e01c80635c975abb116101255780639eb6156c116100ad578063adb9cae61161007c578063adb9cae614610509578063bd14de9614610529578063d547741f1461054a578063de6403901461055d578063e86295141461057057600080fd5b80639eb6156c146104d2578063a0cc8d2c146104e5578063a217fddf146104ee578063a63197d2146104f657600080fd5b80636726e867116100f45780636726e8671461047e5780636944560c146104915780638aa6ded5146104a457806391d14854146104b757806392d5b544146104ca57600080fd5b80635c975abb146103bc57806362e414a4146103c757806363f749f5146103da5780636717e41c1461045b57600080fd5b80632f2ff15d116101a85780633bc52866116101775780633bc5286614610370578063419ffe2c14610383578063429fba4a146102e95780634c27984e146103965780635686b54b146103a957600080fd5b80632f2ff15d1461032e5780633644e5151461034157806336568abe1461034a5780633a67c2f81461035d57600080fd5b80631333f2b7116101ef5780631333f2b71461029d5780631c8abcec146102b0578063248a9ca3146102b8578063291420b3146102e9578063292f2e0e146102fc57600080fd5b806301ffc9a71461022157806306fdde03146102495780630b2655d9146102805780630bd30c1214610295575b600080fd5b61023461022f366004612a50565b610599565b60405190151581526020015b60405180910390f35b6102736040518060400160405280600b81526020016a10dbdb9d1c9858dd199d5b60aa1b81525081565b6040516102409190612aca565b61029361028e366004612add565b6105d0565b005b610293610a2c565b6102936102ab366004612b34565b610a4f565b610293610a87565b6102db6102c6366004612b4f565b60009081526065602052604090206001015490565b604051908152602001610240565b6102936102f7366004612b34565b610b8b565b60cb5461031690600160801b90046001600160801b031681565b6040516001600160801b039091168152602001610240565b61029361033c366004612b7f565b610bc6565b6102db60ca5481565b610293610358366004612b7f565b610bf0565b61029361036b366004612bab565b610c6e565b61029361037e366004612b4f565b610e18565b60cb54610316906001600160801b031681565b6102db6103a4366004612bd5565b61121f565b6102936103b7366004612b4f565b611250565b60975460ff16610234565b6102936103d5366004612bff565b6116e0565b6104296103e8366004612b4f565b600090815260d060205260409020600801546001600160801b0381169160ff600160801b8304811692600160881b8104821692600160901b90910490911690565b604080516001600160801b03909516855292151560208501529015159183019190915215156060820152608001610240565b610234610469366004612b4f565b60c96020526000908152604090205460ff1681565b61029361048c366004612c3b565b61175b565b61023461049f366004612c6e565b611995565b60cc54610316906001600160801b031681565b6102346104c5366004612b7f565b611af5565b610293611b20565b6102936104e0366004612b4f565b611b40565b6102db60ce5481565b6102db600081565b610293610504366004612b4f565b611c06565b61051c610517366004612d27565b611e15565b6040516102409190612d42565b61053c610537366004612b4f565b611e81565b604051610240929190612d86565b610293610558366004612b7f565b612017565b61029361056b366004612b4f565b61203c565b61058361057e366004612b4f565b612163565b6040516102409a99989796959493929190612ec5565b60006001600160e01b03198216637965db0b60e01b14806105ca57506301ffc9a760e01b6001600160e01b03198316145b92915050565b6105d8612297565b60ce54600090815260d06020526040902054156105f7576105f7612f44565b600061060960c0830160a08401612d27565b6001600160a01b031603610630576040516305bf1d9d60e21b815260040160405180910390fd5b3361064160c0830160a08401612d27565b6001600160a01b031603610668576040516346a4b5e960e01b815260040160405180910390fd5b600061067a60a0830160808401612d27565b6001600160a01b0316036106a157604051639b84273b60e01b815260040160405180910390fd5b426106b26040830160208401612b34565b6001600160801b0316116106d957604051630dcde81360e11b815260040160405180910390fd5b61070c6106ec60a0830160808401612d27565b33306106fe6080860160608701612b34565b6001600160801b03166122df565b61071c6080820160608301612b34565b60ce8054600090815260d0602090815260409182902060080180546001600160801b0319166001600160801b0395909516949094179093558051610160810190915290548152908181019061077390840184612b34565b6001600160801b031681526020018260200160208101906107949190612b34565b6001600160801b031681526020016107b26060840160408501612b34565b6001600160801b031681526020016107d06080840160608501612b34565b6001600160801b03908116825260cc548116602083015260cb5416604082015260600161080360a0840160808501612d27565b6001600160a01b0316815260200161082160c0840160a08501612d27565b6001600160a01b0316815233602082015260400161084260c0840184612f5a565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092018290525093909452505060ce54815260d060209081526040918290208451815590840151918401516001600160801b03928316600160801b918416820217600183015560608501516080860151908416908416820217600283015560a085015160c086015190841693160291909117600382015560e08301516004820180546001600160a01b03199081166001600160a01b039384161790915561010085015160058401805483169184169190911790556101208501516006840180549092169216919091179055610140830151909150600782019061094e9082613046565b505033600090815260cf60208181526040832060ce5481546001810183559185529184200155915061098660c0840160a08501612d27565b6001600160a01b03168152602080820192909252604001600090812060ce80548254600181018455928452939092200191909155547fe037ec30313eecdd927ffae3beed86a87b82f7bb794966ec08d75cf1a6e82686906109ed60c0840160a08501612d27565b604080519283526001600160a01b039091166020830152339082015260600160405180910390a160ce8054906000610a248361311c565b919050555050565b6000805160206133fa833981519152610a4481612350565b610a4c61235a565b50565b6000805160206133fa833981519152610a6781612350565b5060cb80546001600160801b03928316600160801b029216919091179055565b600054610100900460ff16610ab75760405162461bcd60e51b8152600401610aae90613135565b60405180910390fd5b604080518082018252600b81526a10dbdb9d1c9858dd199d5b60aa1b6020918201528151808301835260018152603160f81b9082015281517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f818301527f4489533f11b9cc5c3a483b23f3634cc7d8cb2e3435fc90a29c7903cb1dd23ce8818401527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a0808301919091528351808303909101815260c0909101909252815191012060ca55565b6000805160206133fa833981519152610ba381612350565b5060cc80546001600160801b0319166001600160801b0392909216919091179055565b600082815260656020526040902060010154610be181612350565b610beb83836123ac565b505050565b6001600160a01b0381163314610c605760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610aae565b610c6a8282612432565b5050565b600054610100900460ff1615808015610c8e5750600054600160ff909116105b80610ca85750303b158015610ca8575060005460ff166001145b610d0b5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610aae565b6000805460ff191660011790558015610d2e576000805461ff0019166101001790555b610d36610a87565b610d3e612499565b610d466124c0565b60cb80546001600160801b03808616600160801b0291161790556001600160a01b038216610d72573391505b610d7d6000836123ac565b610d956000805160206133fa833981519152836123ac565b610dcd7ffc8737ab85eb45125971625a9ebdb75cc78e01d5c1fa80c4c6e5203f47bc4fab6000805160206133fa8339815191526124f3565b8015610beb576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a1505050565b610e20612297565b600081815260d0602052604090206008810154600160901b900460ff161580610e5457506008810154600160801b900460ff165b80610e6a57506008810154600160881b900460ff165b15610e885760405163c9c2be6d60e01b815260040160405180910390fd5b600082815260d06020526040902060068101546001600160a01b03163314801590610eda5750610ed87ffc8737ab85eb45125971625a9ebdb75cc78e01d5c1fa80c4c6e5203f47bc4fab33611af5565b155b8015610efb5750610ef96000805160206133fa83398151915233611af5565b155b15610f19576040516303135bad60e61b815260040160405180910390fd5b600083815260d0602052604081206001810154909190610f4c906001600160801b0380821691600160801b900416613180565b6002830154909150600090610f6a906001600160801b0316836131bd565b60028401549091506000908190610f8a906001600160801b0316856131e3565b6001600160801b03161515905060005b836001600160801b0316816001600160801b03161015611057576000610fc1826001613209565b6002880154610fd991906001600160801b0316613229565b6001880154610ff191906001600160801b0316613209565b9050806001600160801b0316421061103e5760cb5461102090600160801b90046001600160801b031682613209565b6001600160801b03164211611039576001935050611057565b611044565b50611057565b508061104f81613254565b915050610f9a565b50816110c35780156110c3576001850154600160801b90046001600160801b031642108015906110b9575060cb5460018601546110ac916001600160801b03600160801b918290048116929190910416613209565b6001600160801b03164211155b156110c357600191505b816110e1576040516381c4a38760e01b815260040160405180910390fd5b60028501546008860180546001600160801b03600160801b90930483169260009161110e91859116613180565b82546101009290920a6001600160801b0381810219909316918316021790915560cc5460028801546000935060649261115192811691600160801b900416613229565b61115b91906131bd565b600287015490915061117e908290600160801b90046001600160801b0316613180565b6001600160801b031660cd6000828254611198919061327a565b9091555050600486015460058701546111c7916001600160a01b0390811691166001600160801b03841661253e565b6002860154604080518b8152600160801b9092046001600160801b031660208301527f101b32dc248c08277c4e9a662cd218570f12dccd5a0166380a12991934175f15910160405180910390a1505050505050505050565b60cf602052816000526040600020818154811061123b57600080fd5b90600052602060002001600091509150505481565b611258612297565b600081815260d06020526040902060068101546001600160a01b03163314611293576040516303135bad60e61b815260040160405180910390fd5b60088101805460ff60801b1916600160801b1790819055600160901b900460ff16611346576004808201546006830154600884015460405163a9059cbb60e01b81526001600160a01b039384169463a9059cbb946112fd9416926001600160801b0316910161328d565b6020604051808303816000875af115801561131c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061134091906132af565b506116a9565b600181015460009061136b906001600160801b0380821691600160801b900416613180565b6002830154909150600090611389906001600160801b0316836131bd565b60028401549091506000906113a7906001600160801b0316846131e3565b60028501546001600160801b03918216151592506000916113d49180821691600160801b909104166131bd565b905060005b836001600160801b0316816001600160801b0316101561155c576000611400826001613209565b600288015461141891906001600160801b0316613229565b600188015461143091906001600160801b0316613209565b9050806001600160801b0316421015801561146b5750600287015461145e906001600160801b031682613209565b6001600160801b03164211155b15611549576004870154600588015460038901546001600160a01b039283169263a9059cbb9216906001600160801b03600160801b9091048116906114b2908616426132d1565b6114c5906001600160801b0389166132e4565b6114cf919061327a565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af115801561151a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061153e91906132af565b505050505050505050565b508061155481613254565b9150506113d9565b5081156116a457600285015461157c9084906001600160801b0316613229565b600186015461159491906001600160801b0316613209565b6001600160801b031642101580156115c057506001850154600160801b90046001600160801b03164211155b156116a45760048501546005860154600387015460018801546001600160a01b039384169363a9059cbb9316916001600160801b03600160801b9182900481169261160f9242929104166132d1565b611622906001600160801b0387166132e4565b61162c919061327a565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af1158015611677573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061169b91906132af565b50505050505050565b505050505b6040518281527f0cae0523c4d6568388c55dcaeb921d927527a60000ca46adffedddf87225f0ec9060200160405180910390a15050565b6000805160206133fa8339815191526116f881612350565b60cd54836001600160801b0316111561172457604051630c7c9a7f60e11b815260040160405180910390fd5b600084815260d0602052604090206004810154611754906001600160a01b0316846001600160801b03871661253e565b5050505050565b611763612297565b6000805160206133fa83398151915261177b81612350565b600084815260d060205260408120600881015490916001600160801b0390911690036117a9576117a9612f44565b60088101805460ff60801b1916600160801b1790556117c88385613209565b6001600160801b03166064146117f157604051630ab76a2560e41b815260040160405180910390fd5b60088101546000906064906118109087906001600160801b0316613229565b61181a91906131bd565b600883015490915060009060649061183c9087906001600160801b0316613229565b61184691906131bd565b600484810154600586015460405163a9059cbb60e01b81529394506001600160a01b039182169363a9059cbb93611883939092169187910161328d565b6020604051808303816000875af11580156118a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118c691906132af565b50600480840154600685015460405163a9059cbb60e01b81526001600160a01b039283169363a9059cbb936118ff93169186910161328d565b6020604051808303816000875af115801561191e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061194291906132af565b50604080518881526001600160801b03848116602083015283168183015290517fcc66abc0fd6a7a2cd2810119d6bcbcbeba5a22f087936e5105ac81e84563393c9181900360600190a150505050505050565b600081815260c9602052604081205460ff16156119b157600080fd5b600082815260c960209081526040808320805460ff1916600117905551611a00917f9b5039e58350b398e1e74d78733f690324b2aafee15033156b0ba14d8846461091889188918891016132fb565b604051602081830303815290604052805190602001209050600060ca5482604051602001611a4592919061190160f01b81526002810192909252602282015260420190565b60408051601f198184030181528282528051602091820120600080855291840180845281905260ff8d1692840192909252606083018b9052608083018a90529092509060019060a0016020604051602081039080840390855afa158015611ab0573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038b1615801590611ae65750806001600160a01b03168b6001600160a01b0316145b9b9a5050505050505050505050565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6000805160206133fa833981519152611b3881612350565b610a4c61256e565b611b48612297565b600081815260d0602052604090206008810154600160901b900460ff161580611b7c57506008810154600160801b900460ff165b80611b9257506008810154600160881b900460ff165b15611bb05760405163c9c2be6d60e01b815260040160405180910390fd5b600082815260d060205260409081902060088101805460ff60881b1916600160881b17905590517fa34da6d2673f1264c5d1d4d7d5edaa12c53e8615fa6183cc1cfe6b6510637fce90610e0b9085815260200190565b611c0e612297565b600081815260d0602052604090206008810154600160901b900460ff161580611c4257506008810154600160801b900460ff165b80611c5857506008810154600160881b900460ff165b15611c765760405163c9c2be6d60e01b815260040160405180910390fd5b600082815260d06020526040902060068101546001600160a01b03163314801590611cc85750611cc67ffc8737ab85eb45125971625a9ebdb75cc78e01d5c1fa80c4c6e5203f47bc4fab33611af5565b155b8015611ce95750611ce76000805160206133fa83398151915233611af5565b155b15611d07576040516303135bad60e61b815260040160405180910390fd5b600083815260d06020526040902060088101546001600160801b031615611d41576040516351f16c9360e11b815260040160405180910390fd5b60028101546008820180546001600160801b03600160801b909304831692600091611d6e91859116613209565b82546101009290920a6001600160801b03818102199093169183160217909155600483015460068401546002850154611dc294506001600160a01b039283169392909116913091600160801b9004166122df565b600281015460408051868152600160801b9092046001600160801b031660208301527fd91647d68fadbc904f923d642788552eca006a63f0a8e08d123f6c901d963051910160405180910390a150505050565b6001600160a01b038116600090815260cf6020908152604091829020805483518184028101840190945280845260609392830182828015611e7557602002820191906000526020600020905b815481526020019060010190808311611e61575b50505050509050919050565b60d0602090815260009182526040918290208251610160810184528154815260018201546001600160801b0380821694830194909452600160801b908190048416948201949094526002820154808416606083015284900483166080820152600382015480841660a08301529390930490911660c083015260048101546001600160a01b0390811660e0840152600582015481166101008401526006820154166101208301526007810180549192918391610140840191611f4190612fbe565b80601f0160208091040260200160405190810160405280929190818152602001828054611f6d90612fbe565b8015611fba5780601f10611f8f57610100808354040283529160200191611fba565b820191906000526020600020905b815481529060010190602001808311611f9d57829003601f168201915b505050919092525050604080516080810182526008909401546001600160801b038116855260ff600160801b8204811615156020870152600160881b82048116151592860192909252600160901b90041615156060840152509082565b60008281526065602052604090206001015461203281612350565b610beb8383612432565b600081815260d0602052604090206008810154600160801b900460ff168061206f57506008810154600160901b900460ff165b1561208d57604051638549e3e360e01b815260040160405180910390fd5b600082815260d06020526040902060058101546001600160a01b031633146120c8576040516303135bad60e61b815260040160405180910390fd5b60018101546001600160801b03164211156120f657604051636b506e1760e01b815260040160405180910390fd5b60088101805460ff60901b1916600160901b17905533600090815260cf6020908152604080832060ce5481546001810183559185529290932090920155517fea49e8aa1bbaa9a7b16632ed4aba908b3c702861a23436c8356e296c228cc27890610e0b9085815260200190565b600081815260d060205260408120600181015460028201546003830154600484015460058501546006860154600787018054899889988998899889988998899889986060986001600160801b0380891698600160801b9081900482169880831698908290048316978184169792909104909216946001600160a01b03928316949183169392169181906121f590612fbe565b80601f016020809104026020016040519081016040528092919081815260200182805461222190612fbe565b801561226e5780601f106122435761010080835404028352916020019161226e565b820191906000526020600020905b81548152906001019060200180831161225157829003601f168201915b505050505090509a509a509a509a509a509a509a509a509a509a50509193959799509193959799565b60975460ff16156122dd5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610aae565b565b6040516001600160a01b038085166024830152831660448201526064810182905261234a9085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526125ab565b50505050565b610a4c813361267d565b6123626126d6565b6097805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6123b68282611af5565b610c6a5760008281526065602090815260408083206001600160a01b03851684529091529020805460ff191660011790556123ee3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b61243c8282611af5565b15610c6a5760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600054610100900460ff166122dd5760405162461bcd60e51b8152600401610aae90613135565b600054610100900460ff166124e75760405162461bcd60e51b8152600401610aae90613135565b6097805460ff19169055565b600082815260656020526040808220600101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b6040516001600160a01b038316602482015260448101829052610beb90849063a9059cbb60e01b90606401612313565b612576612297565b6097805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861238f3390565b6000612600826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661271f9092919063ffffffff16565b805190915015610beb578080602001905181019061261e91906132af565b610beb5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610aae565b6126878282611af5565b610c6a5761269481612738565b61269f83602061274a565b6040516020016126b092919061333b565b60408051601f198184030181529082905262461bcd60e51b8252610aae91600401612aca565b60975460ff166122dd5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610aae565b606061272e84846000856128e6565b90505b9392505050565b60606105ca6001600160a01b03831660145b606060006127598360026132e4565b61276490600261327a565b67ffffffffffffffff81111561277c5761277c612fa8565b6040519080825280601f01601f1916602001820160405280156127a6576020820181803683370190505b509050600360fc1b816000815181106127c1576127c16133b0565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106127f0576127f06133b0565b60200101906001600160f81b031916908160001a90535060006128148460026132e4565b61281f90600161327a565b90505b6001811115612897576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110612853576128536133b0565b1a60f81b828281518110612869576128696133b0565b60200101906001600160f81b031916908160001a90535060049490941c93612890816133c6565b9050612822565b5083156127315760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610aae565b6060824710156129475760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610aae565b6001600160a01b0385163b61299e5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610aae565b600080866001600160a01b031685876040516129ba91906133dd565b60006040518083038185875af1925050503d80600081146129f7576040519150601f19603f3d011682016040523d82523d6000602084013e6129fc565b606091505b5091509150612a0c828286612a17565b979650505050505050565b60608315612a26575081612731565b825115612a365782518084602001fd5b8160405162461bcd60e51b8152600401610aae9190612aca565b600060208284031215612a6257600080fd5b81356001600160e01b03198116811461273157600080fd5b60005b83811015612a95578181015183820152602001612a7d565b50506000910152565b60008151808452612ab6816020860160208601612a7a565b601f01601f19169290920160200192915050565b6020815260006127316020830184612a9e565b600060208284031215612aef57600080fd5b813567ffffffffffffffff811115612b0657600080fd5b820160e0818503121561273157600080fd5b80356001600160801b0381168114612b2f57600080fd5b919050565b600060208284031215612b4657600080fd5b61273182612b18565b600060208284031215612b6157600080fd5b5035919050565b80356001600160a01b0381168114612b2f57600080fd5b60008060408385031215612b9257600080fd5b82359150612ba260208401612b68565b90509250929050565b60008060408385031215612bbe57600080fd5b612bc783612b18565b9150612ba260208401612b68565b60008060408385031215612be857600080fd5b612bf183612b68565b946020939093013593505050565b600080600060608486031215612c1457600080fd5b83359250612c2460208501612b18565b9150612c3260408501612b68565b90509250925092565b600080600060608486031215612c5057600080fd5b83359250612c6060208501612b18565b9150612c3260408501612b18565b600080600080600080600060c0888a031215612c8957600080fd5b612c9288612b68565b9650602088013560ff81168114612ca857600080fd5b95506040880135945060608801359350608088013567ffffffffffffffff80821115612cd357600080fd5b818a0191508a601f830112612ce757600080fd5b813581811115612cf657600080fd5b8b6020828501011115612d0857600080fd5b60208301955080945050505060a0880135905092959891949750929550565b600060208284031215612d3957600080fd5b61273182612b68565b6020808252825182820181905260009190848201906040850190845b81811015612d7a57835183529284019291840191600101612d5e565b50909695505050505050565b60a08152825160a082015260006020840151612dad60c08401826001600160801b03169052565b5060408401516001600160801b03811660e0840152506060840151610100612ddf818501836001600160801b03169052565b60808601519150610120612dfd818601846001600160801b03169052565b60a08701519250610140612e1b818701856001600160801b03169052565b60c08801519350610160612e39818801866001600160801b03169052565b60e08901516001600160a01b039081166101808901529389015184166101a0880152918801519092166101c0860152908601516101e08501919091529050612e85610200840182612a9e565b91505061273160208301846001600160801b0381511682526020810151151560208301526040810151151560408301526060810151151560608301525050565b6001600160801b038b811682528a81166020830152898116604083015288811660608301528781166080830152861660a08201526001600160a01b0385811660c083015284811660e083015283166101008201526101406101208201819052600090612f3383820185612a9e565b9d9c50505050505050505050505050565b634e487b7160e01b600052600160045260246000fd5b6000808335601e19843603018112612f7157600080fd5b83018035915067ffffffffffffffff821115612f8c57600080fd5b602001915036819003821315612fa157600080fd5b9250929050565b634e487b7160e01b600052604160045260246000fd5b600181811c90821680612fd257607f821691505b602082108103612ff257634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115610beb57600081815260208120601f850160051c8101602086101561301f5750805b601f850160051c820191505b8181101561303e5782815560010161302b565b505050505050565b815167ffffffffffffffff81111561306057613060612fa8565b6130748161306e8454612fbe565b84612ff8565b602080601f8311600181146130a957600084156130915750858301515b600019600386901b1c1916600185901b17855561303e565b600085815260208120601f198616915b828110156130d8578886015182559484019460019091019084016130b9565b50858210156130f65787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052601160045260246000fd5b60006001820161312e5761312e613106565b5060010190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6001600160801b038281168282160390808211156131a0576131a0613106565b5092915050565b634e487b7160e01b600052601260045260246000fd5b60006001600160801b03808416806131d7576131d76131a7565b92169190910492915050565b60006001600160801b03808416806131fd576131fd6131a7565b92169190910692915050565b6001600160801b038181168382160190808211156131a0576131a0613106565b6001600160801b0381811683821602808216919082811461324c5761324c613106565b505092915050565b60006001600160801b0380831681810361327057613270613106565b6001019392505050565b808201808211156105ca576105ca613106565b6001600160a01b039290921682526001600160801b0316602082015260400190565b6000602082840312156132c157600080fd5b8151801515811461273157600080fd5b818103818111156105ca576105ca613106565b80820281158282048414176105ca576105ca613106565b848152606060208201528260608201528284608083013760006080848301015260006080601f19601f860116830101905082604083015295945050505050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351613373816017850160208801612a7a565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516133a4816028840160208801612a7a565b01602801949350505050565b634e487b7160e01b600052603260045260246000fd5b6000816133d5576133d5613106565b506000190190565b600082516133ef818460208701612a7a565b919091019291505056fe71840dc4906352362b0cdaf79870196c8e42acafade72d5d5a6d59291253ceb1a2646970667358221220d6caf68c44b31b87bbab4ac45d4bb75fef2d244ed5e989a00cfe160c5f18006a64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "activateAgreement(uint256)": {
        "details": "The agreement needs to be created, inactive and the funds for the first cycle set",
        "params": {
          "agreementID": "The ID of the agreement to activate"
        }
      },
      "cancelAgreement(uint256)": {
        "details": "only callable by the contractee",
        "params": {
          "agreementID": "The ID of the agreement"
        }
      },
      "challengeAgreement(uint256)": {
        "params": {
          "agreementID": "The ID of the agreement"
        }
      },
      "claimProtocolFees(uint256,uint128,address)": {
        "params": {
          "agreementID": "The identifier of the agreement",
          "amount": "The amount of tokens claimed",
          "to": "The address receiving the fees*"
        }
      },
      "createAgreement((uint128,uint128,uint128,uint128,address,address,string))": {
        "details": "The agreement default state is inactive, it needs to be activated by the contractor",
        "params": {
          "params": "The parameters of the agreement"
        }
      },
      "getAgreementParameters(uint256)": {
        "details": "an agreement can be not active because it has not been activated or because it is closed",
        "params": {
          "agreementID": "The ID of the agreement"
        },
        "returns": {
          "beginningDate": "The beginning date of the agreement",
          "contractee": "The address of the contractee",
          "contractor": "The address of the contractor",
          "descriptionURI": "The URI of the agreement description",
          "establishmentFeeRate_": "The rate of the establishment fee",
          "maturityDate": "The date when the agreement expires",
          "paymentCycleAmount": "The amount of tokens to be released per payment cycle",
          "paymentCycleDuration": "The duration of a payment cycle",
          "penalizationAmount_": "The amount of tokens that will be kept in case of a penalization",
          "underlayingToken": "The address of the token used for the agreement"
        }
      },
      "getAgreementState(uint256)": {
        "params": {
          "active": "Whether the agreement is active",
          "agreementID": "The ID of the agreement",
          "challenged": "Whether the agreement is challenged",
          "closed": "Whether the agreement is closed",
          "escrowedFunds": "The amount of funds escrowed in the agreement"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getUserAgreements(address)": {
        "params": {
          "user": "The address of the user"
        },
        "returns": {
          "_0": "agreementIDs The IDs of the agreements"
        }
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "migrateFunds(uint256)": {
        "details": "Only the keeper or contractee can call this functionA for loop is used to calculate the migration periods instead of storing them on chain to reduce gas costsIf there is a remainder, the last migration period will be shorter than the others and fall on the maturity date",
        "params": {
          "agreementID": "The ID of the agreement to release the funds for"
        }
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "setChallengeDuration(uint128)": {
        "params": {
          "challengeDuration_": "The new challenge duration"
        }
      },
      "setEstablishmentFeeRate(uint128)": {
        "params": {
          "establishmentFeeRate_": "The new establishment fee rate"
        }
      },
      "setPenalizationAmount(uint128)": {
        "params": {
          "penalizationAmount_": "The new penalization amount"
        }
      },
      "splitFunds(uint256,uint128,uint128)": {
        "details": "Only integers can be passed as pecentages. The function does't calculate for decimal points",
        "params": {
          "agreementID": "The ID of the agreement",
          "contracteePercentage": "The percentage of the escrowed funds to be released to the contractee",
          "contractorPercentage": "The percentage of the escrowed funds to be released to the contractor"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "AgreementActivated(uint256)": {
        "notice": "Emitted after a agreement was activated"
      },
      "AgreementCancelled(uint256)": {
        "notice": "Emitted after a agreement was cancelled"
      },
      "AgreementChallenged(uint256)": {
        "notice": "Emitted after an agreement was challenged"
      },
      "AgreementCreated(uint256,address,address)": {
        "notice": "Emitted after a event was creted"
      },
      "FundsDeposited(uint256,uint128)": {
        "notice": "Emitted after funds are deposited for the upcoming cycle"
      },
      "FundsMigrated(uint256,uint128)": {
        "notice": "Emitted after funds were migrated"
      },
      "FundsSplitted(uint256,uint128,uint128)": {
        "notice": "Emitted after the escrowd funds for an agreement were splitted"
      }
    },
    "kind": "user",
    "methods": {
      "activateAgreement(uint256)": {
        "notice": "Activates an agreement"
      },
      "cancelAgreement(uint256)": {
        "notice": "Closes an agreement and releases the escrowed funds accordingly to the agreement state"
      },
      "challengeAgreement(uint256)": {
        "notice": "Sets the agreement state to challenged and emmits an event that will be captured by the Contractful DAO( currently a multisig)"
      },
      "claimProtocolFees(uint256,uint128,address)": {
        "notice": "Withdraws protocol fees to a target address"
      },
      "createAgreement((uint128,uint128,uint128,uint128,address,address,string))": {
        "notice": "Creates a new agreement"
      },
      "freezeAgreements()": {
        "notice": "Stops all actions on all agreements*"
      },
      "getAgreementParameters(uint256)": {
        "notice": "Returns the parameters of an agreement"
      },
      "getAgreementState(uint256)": {
        "notice": "Returns the state of an agreement"
      },
      "getUserAgreements(address)": {
        "notice": "Returns the user agreements"
      },
      "migrateFunds(uint256)": {
        "notice": "Releases the funds for the current payment cycle"
      },
      "setChallengeDuration(uint128)": {
        "notice": "Sets the challenge duration for all agreements"
      },
      "setEstablishmentFeeRate(uint128)": {
        "notice": "Set the establishment protocol fee rate"
      },
      "setPenalizationAmount(uint128)": {
        "notice": "Set the penalization amount for the protocol"
      },
      "splitFunds(uint256,uint128,uint128)": {
        "notice": "Releases the escrowed funds accordingly to the percentages passed as parametersFor the moment the function is only callable by governance wich is a multisig wallet. However in the future it will only be callable by the Contractful DAO"
      },
      "unfreezeAgreements()": {
        "notice": "Cancel a freeze, makes actions available again on all agreements*"
      },
      "validateDescription(address,uint8,bytes32,bytes32,string,uint256)": {
        "notice": "checks whether the signer signed the description"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 415,
        "contract": "src/Manager.sol:Manager",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 418,
        "contract": "src/Manager.sol:Manager",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1029,
        "contract": "src/Manager.sol:Manager",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1248,
        "contract": "src/Manager.sol:Manager",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 39,
        "contract": "src/Manager.sol:Manager",
        "label": "_roles",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)"
      },
      {
        "astId": 334,
        "contract": "src/Manager.sol:Manager",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 598,
        "contract": "src/Manager.sol:Manager",
        "label": "_paused",
        "offset": 0,
        "slot": "151",
        "type": "t_bool"
      },
      {
        "astId": 703,
        "contract": "src/Manager.sol:Manager",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 4091,
        "contract": "src/Manager.sol:Manager",
        "label": "usedNonces",
        "offset": 0,
        "slot": "201",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 4093,
        "contract": "src/Manager.sol:Manager",
        "label": "DOMAIN_SEPARATOR",
        "offset": 0,
        "slot": "202",
        "type": "t_bytes32"
      },
      {
        "astId": 2830,
        "contract": "src/Manager.sol:Manager",
        "label": "penalizationAmount",
        "offset": 0,
        "slot": "203",
        "type": "t_uint128"
      },
      {
        "astId": 2832,
        "contract": "src/Manager.sol:Manager",
        "label": "challengeDuration",
        "offset": 16,
        "slot": "203",
        "type": "t_uint128"
      },
      {
        "astId": 2834,
        "contract": "src/Manager.sol:Manager",
        "label": "establishmentFeeRate",
        "offset": 0,
        "slot": "204",
        "type": "t_uint128"
      },
      {
        "astId": 2837,
        "contract": "src/Manager.sol:Manager",
        "label": "accruedEstablishmentFee",
        "offset": 0,
        "slot": "205",
        "type": "t_uint256"
      },
      {
        "astId": 2840,
        "contract": "src/Manager.sol:Manager",
        "label": "agreementNonce",
        "offset": 0,
        "slot": "206",
        "type": "t_uint256"
      },
      {
        "astId": 2845,
        "contract": "src/Manager.sol:Manager",
        "label": "userAgreements",
        "offset": 0,
        "slot": "207",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 2850,
        "contract": "src/Manager.sol:Manager",
        "label": "agreements",
        "offset": 0,
        "slot": "208",
        "type": "t_mapping(t_uint256,t_struct(Agreement)4462_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)34_storage"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(Agreement)4462_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Types.Agreement)",
        "numberOfBytes": "32",
        "value": "t_struct(Agreement)4462_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Agreement)4462_storage": {
        "encoding": "inplace",
        "label": "struct Types.Agreement",
        "members": [
          {
            "astId": 4458,
            "contract": "src/Manager.sol:Manager",
            "label": "parameters",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(AgreementParameters)4446_storage"
          },
          {
            "astId": 4461,
            "contract": "src/Manager.sol:Manager",
            "label": "state",
            "offset": 0,
            "slot": "8",
            "type": "t_struct(AgreementState)4455_storage"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_struct(AgreementParameters)4446_storage": {
        "encoding": "inplace",
        "label": "struct Types.AgreementParameters",
        "members": [
          {
            "astId": 4425,
            "contract": "src/Manager.sol:Manager",
            "label": "AGREEMENT_ID",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4427,
            "contract": "src/Manager.sol:Manager",
            "label": "BEGINNING_DATE",
            "offset": 0,
            "slot": "1",
            "type": "t_uint128"
          },
          {
            "astId": 4429,
            "contract": "src/Manager.sol:Manager",
            "label": "MATURITY_DATE",
            "offset": 16,
            "slot": "1",
            "type": "t_uint128"
          },
          {
            "astId": 4431,
            "contract": "src/Manager.sol:Manager",
            "label": "PAYMENT_CYCLE_DURATION",
            "offset": 0,
            "slot": "2",
            "type": "t_uint128"
          },
          {
            "astId": 4433,
            "contract": "src/Manager.sol:Manager",
            "label": "PAYMENT_CYCLE_AMOUNT",
            "offset": 16,
            "slot": "2",
            "type": "t_uint128"
          },
          {
            "astId": 4435,
            "contract": "src/Manager.sol:Manager",
            "label": "ESTABLISHMENT_FEE_RATE",
            "offset": 0,
            "slot": "3",
            "type": "t_uint128"
          },
          {
            "astId": 4437,
            "contract": "src/Manager.sol:Manager",
            "label": "PENALIZATION_AMOUNT",
            "offset": 16,
            "slot": "3",
            "type": "t_uint128"
          },
          {
            "astId": 4439,
            "contract": "src/Manager.sol:Manager",
            "label": "UNDERLAYING_TOKEN",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 4441,
            "contract": "src/Manager.sol:Manager",
            "label": "CONTRACTOR",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 4443,
            "contract": "src/Manager.sol:Manager",
            "label": "CONTRACTEE",
            "offset": 0,
            "slot": "6",
            "type": "t_address"
          },
          {
            "astId": 4445,
            "contract": "src/Manager.sol:Manager",
            "label": "DESCRIPTION_URI",
            "offset": 0,
            "slot": "7",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(AgreementState)4455_storage": {
        "encoding": "inplace",
        "label": "struct Types.AgreementState",
        "members": [
          {
            "astId": 4448,
            "contract": "src/Manager.sol:Manager",
            "label": "escrowedFunds",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 4450,
            "contract": "src/Manager.sol:Manager",
            "label": "closed",
            "offset": 16,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 4452,
            "contract": "src/Manager.sol:Manager",
            "label": "challenged",
            "offset": 17,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 4454,
            "contract": "src/Manager.sol:Manager",
            "label": "active",
            "offset": 18,
            "slot": "0",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)34_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 31,
            "contract": "src/Manager.sol:Manager",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 33,
            "contract": "src/Manager.sol:Manager",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}